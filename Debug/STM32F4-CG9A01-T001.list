
STM32F4-CG9A01-T001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030ec  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003274  08003274  00013274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800328c  0800328c  0002960c  2**0
                  CONTENTS
  4 .ARM          00000008  0800328c  0800328c  0001328c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003294  08003294  0002960c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003294  08003294  00013294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003298  08003298  00013298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000960c  20000000  0800329c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002960c  2**0
                  CONTENTS
 10 .bss          00000138  2000960c  2000960c  0002960c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20009744  20009744  0002960c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002960c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008352  00000000  00000000  0002963c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ac0  00000000  00000000  0003198e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000798  00000000  00000000  00033450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006b0  00000000  00000000  00033be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fc89  00000000  00000000  00034298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000978b  00000000  00000000  00053f21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000be83c  00000000  00000000  0005d6ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011bee8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001ccc  00000000  00000000  0011bf38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000960c 	.word	0x2000960c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800325c 	.word	0x0800325c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20009610 	.word	0x20009610
 80001c4:	0800325c 	.word	0x0800325c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <Write_Cmd_Data>:

//===============================================================
//write parameter

void  Write_Cmd_Data (unsigned char CMDP)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	71fb      	strb	r3, [r7, #7]
    LCD_CS_0;
 80004d6:	2200      	movs	r2, #0
 80004d8:	2180      	movs	r1, #128	; 0x80
 80004da:	480b      	ldr	r0, [pc, #44]	; (8000508 <Write_Cmd_Data+0x3c>)
 80004dc:	f001 fe48 	bl	8002170 <HAL_GPIO_WritePin>
   	LCD_DC_1;
 80004e0:	2201      	movs	r2, #1
 80004e2:	2140      	movs	r1, #64	; 0x40
 80004e4:	4808      	ldr	r0, [pc, #32]	; (8000508 <Write_Cmd_Data+0x3c>)
 80004e6:	f001 fe43 	bl	8002170 <HAL_GPIO_WritePin>

   	SPI_Write(&CMDP, 1);
 80004ea:	1dfb      	adds	r3, r7, #7
 80004ec:	2101      	movs	r1, #1
 80004ee:	4618      	mov	r0, r3
 80004f0:	f000 f888 	bl	8000604 <SPI_Write>

   	LCD_CS_1;
 80004f4:	2201      	movs	r2, #1
 80004f6:	2180      	movs	r1, #128	; 0x80
 80004f8:	4803      	ldr	r0, [pc, #12]	; (8000508 <Write_Cmd_Data+0x3c>)
 80004fa:	f001 fe39 	bl	8002170 <HAL_GPIO_WritePin>
}
 80004fe:	bf00      	nop
 8000500:	3708      	adds	r7, #8
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40020400 	.word	0x40020400

0800050c <Write_Cmd>:

//=============================================================
//write command

void Write_Cmd(unsigned char CMD)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	4603      	mov	r3, r0
 8000514:	71fb      	strb	r3, [r7, #7]
    LCD_CS_0;
 8000516:	2200      	movs	r2, #0
 8000518:	2180      	movs	r1, #128	; 0x80
 800051a:	480b      	ldr	r0, [pc, #44]	; (8000548 <Write_Cmd+0x3c>)
 800051c:	f001 fe28 	bl	8002170 <HAL_GPIO_WritePin>
   	LCD_DC_0;
 8000520:	2200      	movs	r2, #0
 8000522:	2140      	movs	r1, #64	; 0x40
 8000524:	4808      	ldr	r0, [pc, #32]	; (8000548 <Write_Cmd+0x3c>)
 8000526:	f001 fe23 	bl	8002170 <HAL_GPIO_WritePin>

   	SPI_Write(&CMD, 1);
 800052a:	1dfb      	adds	r3, r7, #7
 800052c:	2101      	movs	r1, #1
 800052e:	4618      	mov	r0, r3
 8000530:	f000 f868 	bl	8000604 <SPI_Write>

   	LCD_CS_1;
 8000534:	2201      	movs	r2, #1
 8000536:	2180      	movs	r1, #128	; 0x80
 8000538:	4803      	ldr	r0, [pc, #12]	; (8000548 <Write_Cmd+0x3c>)
 800053a:	f001 fe19 	bl	8002170 <HAL_GPIO_WritePin>
}
 800053e:	bf00      	nop
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	40020400 	.word	0x40020400

0800054c <Write_Data_U16>:

//==============================================================
//write  data word

void  Write_Data_U16(unsigned int y)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
	unsigned char m,n;
	m=y>>8;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	0a1b      	lsrs	r3, r3, #8
 8000558:	73fb      	strb	r3, [r7, #15]
	n=y;
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	73bb      	strb	r3, [r7, #14]
	Write_Data(m,n);
 800055e:	7bba      	ldrb	r2, [r7, #14]
 8000560:	7bfb      	ldrb	r3, [r7, #15]
 8000562:	4611      	mov	r1, r2
 8000564:	4618      	mov	r0, r3
 8000566:	f000 f805 	bl	8000574 <Write_Data>
}
 800056a:	bf00      	nop
 800056c:	3710      	adds	r7, #16
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
	...

08000574 <Write_Data>:

//===================================================================
//write data byte

void Write_Data(unsigned char DH,unsigned char DL)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	460a      	mov	r2, r1
 800057e:	71fb      	strb	r3, [r7, #7]
 8000580:	4613      	mov	r3, r2
 8000582:	71bb      	strb	r3, [r7, #6]
    LCD_CS_0;
 8000584:	2200      	movs	r2, #0
 8000586:	2180      	movs	r1, #128	; 0x80
 8000588:	480d      	ldr	r0, [pc, #52]	; (80005c0 <Write_Data+0x4c>)
 800058a:	f001 fdf1 	bl	8002170 <HAL_GPIO_WritePin>
   	LCD_DC_1;
 800058e:	2201      	movs	r2, #1
 8000590:	2140      	movs	r1, #64	; 0x40
 8000592:	480b      	ldr	r0, [pc, #44]	; (80005c0 <Write_Data+0x4c>)
 8000594:	f001 fdec 	bl	8002170 <HAL_GPIO_WritePin>

   	SPI_Write(&DH, 1);
 8000598:	1dfb      	adds	r3, r7, #7
 800059a:	2101      	movs	r1, #1
 800059c:	4618      	mov	r0, r3
 800059e:	f000 f831 	bl	8000604 <SPI_Write>
   	SPI_Write(&DL, 1);
 80005a2:	1dbb      	adds	r3, r7, #6
 80005a4:	2101      	movs	r1, #1
 80005a6:	4618      	mov	r0, r3
 80005a8:	f000 f82c 	bl	8000604 <SPI_Write>

   	LCD_CS_1;
 80005ac:	2201      	movs	r2, #1
 80005ae:	2180      	movs	r1, #128	; 0x80
 80005b0:	4803      	ldr	r0, [pc, #12]	; (80005c0 <Write_Data+0x4c>)
 80005b2:	f001 fddd 	bl	8002170 <HAL_GPIO_WritePin>
}
 80005b6:	bf00      	nop
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40020400 	.word	0x40020400

080005c4 <Write_Bytes>:


void Write_Bytes(unsigned char * pbuff, unsigned short size)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	460b      	mov	r3, r1
 80005ce:	807b      	strh	r3, [r7, #2]
    LCD_CS_0;
 80005d0:	2200      	movs	r2, #0
 80005d2:	2180      	movs	r1, #128	; 0x80
 80005d4:	480a      	ldr	r0, [pc, #40]	; (8000600 <Write_Bytes+0x3c>)
 80005d6:	f001 fdcb 	bl	8002170 <HAL_GPIO_WritePin>
   	LCD_DC_1;
 80005da:	2201      	movs	r2, #1
 80005dc:	2140      	movs	r1, #64	; 0x40
 80005de:	4808      	ldr	r0, [pc, #32]	; (8000600 <Write_Bytes+0x3c>)
 80005e0:	f001 fdc6 	bl	8002170 <HAL_GPIO_WritePin>

   	SPI_Write(pbuff, size);
 80005e4:	887b      	ldrh	r3, [r7, #2]
 80005e6:	4619      	mov	r1, r3
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f000 f80b 	bl	8000604 <SPI_Write>

   	LCD_CS_1;
 80005ee:	2201      	movs	r2, #1
 80005f0:	2180      	movs	r1, #128	; 0x80
 80005f2:	4803      	ldr	r0, [pc, #12]	; (8000600 <Write_Bytes+0x3c>)
 80005f4:	f001 fdbc 	bl	8002170 <HAL_GPIO_WritePin>
}
 80005f8:	bf00      	nop
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40020400 	.word	0x40020400

08000604 <SPI_Write>:


HAL_StatusTypeDef SPI_Write(uint8_t* pbuff, uint16_t size)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	460b      	mov	r3, r1
 800060e:	807b      	strh	r3, [r7, #2]
	//使用DMA传输，用HAL_SPI_Transmit_DMA调用。
    HAL_StatusTypeDef status =  HAL_SPI_Transmit_DMA(&hspi1, pbuff, size);
 8000610:	887b      	ldrh	r3, [r7, #2]
 8000612:	461a      	mov	r2, r3
 8000614:	6879      	ldr	r1, [r7, #4]
 8000616:	4808      	ldr	r0, [pc, #32]	; (8000638 <SPI_Write+0x34>)
 8000618:	f002 fab2 	bl	8002b80 <HAL_SPI_Transmit_DMA>
 800061c:	4603      	mov	r3, r0
 800061e:	73fb      	strb	r3, [r7, #15]
    while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY){;}
 8000620:	bf00      	nop
 8000622:	4805      	ldr	r0, [pc, #20]	; (8000638 <SPI_Write+0x34>)
 8000624:	f002 fc80 	bl	8002f28 <HAL_SPI_GetState>
 8000628:	4603      	mov	r3, r0
 800062a:	2b01      	cmp	r3, #1
 800062c:	d1f9      	bne.n	8000622 <SPI_Write+0x1e>
    return status;
 800062e:	7bfb      	ldrb	r3, [r7, #15]

    //不使用DMA传输，用HAL_SPI_Transmit调用。
    //return HAL_SPI_Transmit(&hspi1, pbuff, size, 100);
}
 8000630:	4618      	mov	r0, r3
 8000632:	3710      	adds	r7, #16
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20009628 	.word	0x20009628

0800063c <GC9A01_Initial>:

//=============================================================
//LCD Initial

void GC9A01_Initial(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  	LCD_CS_1;
 8000640:	2201      	movs	r2, #1
 8000642:	2180      	movs	r1, #128	; 0x80
 8000644:	48fc      	ldr	r0, [pc, #1008]	; (8000a38 <GC9A01_Initial+0x3fc>)
 8000646:	f001 fd93 	bl	8002170 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800064a:	2005      	movs	r0, #5
 800064c:	f000 ff2c 	bl	80014a8 <HAL_Delay>
	LCD_RST_0;
 8000650:	2200      	movs	r2, #0
 8000652:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000656:	48f8      	ldr	r0, [pc, #992]	; (8000a38 <GC9A01_Initial+0x3fc>)
 8000658:	f001 fd8a 	bl	8002170 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800065c:	200a      	movs	r0, #10
 800065e:	f000 ff23 	bl	80014a8 <HAL_Delay>
	LCD_RST_1;
 8000662:	2201      	movs	r2, #1
 8000664:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000668:	48f3      	ldr	r0, [pc, #972]	; (8000a38 <GC9A01_Initial+0x3fc>)
 800066a:	f001 fd81 	bl	8002170 <HAL_GPIO_WritePin>
	HAL_Delay(120);
 800066e:	2078      	movs	r0, #120	; 0x78
 8000670:	f000 ff1a 	bl	80014a8 <HAL_Delay>


 //************* Start Initial Sequence **********//
	Write_Cmd(0xEF);
 8000674:	20ef      	movs	r0, #239	; 0xef
 8000676:	f7ff ff49 	bl	800050c <Write_Cmd>

	Write_Cmd(0xEB);
 800067a:	20eb      	movs	r0, #235	; 0xeb
 800067c:	f7ff ff46 	bl	800050c <Write_Cmd>
	Write_Cmd_Data(0x14);
 8000680:	2014      	movs	r0, #20
 8000682:	f7ff ff23 	bl	80004cc <Write_Cmd_Data>

    Write_Cmd(0xFE);
 8000686:	20fe      	movs	r0, #254	; 0xfe
 8000688:	f7ff ff40 	bl	800050c <Write_Cmd>
	Write_Cmd(0xEF);
 800068c:	20ef      	movs	r0, #239	; 0xef
 800068e:	f7ff ff3d 	bl	800050c <Write_Cmd>

	Write_Cmd(0xEB);
 8000692:	20eb      	movs	r0, #235	; 0xeb
 8000694:	f7ff ff3a 	bl	800050c <Write_Cmd>
	Write_Cmd_Data(0x14);
 8000698:	2014      	movs	r0, #20
 800069a:	f7ff ff17 	bl	80004cc <Write_Cmd_Data>

	Write_Cmd(0x84);
 800069e:	2084      	movs	r0, #132	; 0x84
 80006a0:	f7ff ff34 	bl	800050c <Write_Cmd>
	Write_Cmd_Data(0x40);
 80006a4:	2040      	movs	r0, #64	; 0x40
 80006a6:	f7ff ff11 	bl	80004cc <Write_Cmd_Data>

	Write_Cmd(0x85);
 80006aa:	2085      	movs	r0, #133	; 0x85
 80006ac:	f7ff ff2e 	bl	800050c <Write_Cmd>
	Write_Cmd_Data(0xFF);
 80006b0:	20ff      	movs	r0, #255	; 0xff
 80006b2:	f7ff ff0b 	bl	80004cc <Write_Cmd_Data>

	Write_Cmd(0x86);
 80006b6:	2086      	movs	r0, #134	; 0x86
 80006b8:	f7ff ff28 	bl	800050c <Write_Cmd>
	Write_Cmd_Data(0xFF);
 80006bc:	20ff      	movs	r0, #255	; 0xff
 80006be:	f7ff ff05 	bl	80004cc <Write_Cmd_Data>

	Write_Cmd(0x87);
 80006c2:	2087      	movs	r0, #135	; 0x87
 80006c4:	f7ff ff22 	bl	800050c <Write_Cmd>
	Write_Cmd_Data(0xFF);
 80006c8:	20ff      	movs	r0, #255	; 0xff
 80006ca:	f7ff feff 	bl	80004cc <Write_Cmd_Data>

	Write_Cmd(0x88);
 80006ce:	2088      	movs	r0, #136	; 0x88
 80006d0:	f7ff ff1c 	bl	800050c <Write_Cmd>
	Write_Cmd_Data(0x0A);
 80006d4:	200a      	movs	r0, #10
 80006d6:	f7ff fef9 	bl	80004cc <Write_Cmd_Data>

	Write_Cmd(0x89);
 80006da:	2089      	movs	r0, #137	; 0x89
 80006dc:	f7ff ff16 	bl	800050c <Write_Cmd>
	Write_Cmd_Data(0x21);
 80006e0:	2021      	movs	r0, #33	; 0x21
 80006e2:	f7ff fef3 	bl	80004cc <Write_Cmd_Data>

	Write_Cmd(0x8A);
 80006e6:	208a      	movs	r0, #138	; 0x8a
 80006e8:	f7ff ff10 	bl	800050c <Write_Cmd>
	Write_Cmd_Data(0x00);
 80006ec:	2000      	movs	r0, #0
 80006ee:	f7ff feed 	bl	80004cc <Write_Cmd_Data>

	Write_Cmd(0x8B);
 80006f2:	208b      	movs	r0, #139	; 0x8b
 80006f4:	f7ff ff0a 	bl	800050c <Write_Cmd>
	Write_Cmd_Data(0x80);
 80006f8:	2080      	movs	r0, #128	; 0x80
 80006fa:	f7ff fee7 	bl	80004cc <Write_Cmd_Data>

	Write_Cmd(0x8C);
 80006fe:	208c      	movs	r0, #140	; 0x8c
 8000700:	f7ff ff04 	bl	800050c <Write_Cmd>
	Write_Cmd_Data(0x01);
 8000704:	2001      	movs	r0, #1
 8000706:	f7ff fee1 	bl	80004cc <Write_Cmd_Data>

	Write_Cmd(0x8D);
 800070a:	208d      	movs	r0, #141	; 0x8d
 800070c:	f7ff fefe 	bl	800050c <Write_Cmd>
	Write_Cmd_Data(0x01);
 8000710:	2001      	movs	r0, #1
 8000712:	f7ff fedb 	bl	80004cc <Write_Cmd_Data>

	Write_Cmd(0x8E);
 8000716:	208e      	movs	r0, #142	; 0x8e
 8000718:	f7ff fef8 	bl	800050c <Write_Cmd>
	Write_Cmd_Data(0xFF);
 800071c:	20ff      	movs	r0, #255	; 0xff
 800071e:	f7ff fed5 	bl	80004cc <Write_Cmd_Data>

	Write_Cmd(0x8F);
 8000722:	208f      	movs	r0, #143	; 0x8f
 8000724:	f7ff fef2 	bl	800050c <Write_Cmd>
	Write_Cmd_Data(0xFF);
 8000728:	20ff      	movs	r0, #255	; 0xff
 800072a:	f7ff fecf 	bl	80004cc <Write_Cmd_Data>


	Write_Cmd(0xB6);
 800072e:	20b6      	movs	r0, #182	; 0xb6
 8000730:	f7ff feec 	bl	800050c <Write_Cmd>
	Write_Cmd_Data(0x00);
 8000734:	2000      	movs	r0, #0
 8000736:	f7ff fec9 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0x00);
 800073a:	2000      	movs	r0, #0
 800073c:	f7ff fec6 	bl	80004cc <Write_Cmd_Data>

	Write_Cmd(0x36);
 8000740:	2036      	movs	r0, #54	; 0x36
 8000742:	f7ff fee3 	bl	800050c <Write_Cmd>

	if(USE_HORIZONTAL==0)Write_Cmd_Data(0x18);
	else if(USE_HORIZONTAL==1)Write_Cmd_Data(0x28);
	else if(USE_HORIZONTAL==2)Write_Cmd_Data(0x48);
 8000746:	2048      	movs	r0, #72	; 0x48
 8000748:	f7ff fec0 	bl	80004cc <Write_Cmd_Data>
	else Write_Cmd_Data(0x88);



	Write_Cmd(0x3A);
 800074c:	203a      	movs	r0, #58	; 0x3a
 800074e:	f7ff fedd 	bl	800050c <Write_Cmd>
	Write_Cmd_Data(0x05);
 8000752:	2005      	movs	r0, #5
 8000754:	f7ff feba 	bl	80004cc <Write_Cmd_Data>


	Write_Cmd(0x90);
 8000758:	2090      	movs	r0, #144	; 0x90
 800075a:	f7ff fed7 	bl	800050c <Write_Cmd>
	Write_Cmd_Data(0x08);
 800075e:	2008      	movs	r0, #8
 8000760:	f7ff feb4 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0x08);
 8000764:	2008      	movs	r0, #8
 8000766:	f7ff feb1 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0x08);
 800076a:	2008      	movs	r0, #8
 800076c:	f7ff feae 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0x08);
 8000770:	2008      	movs	r0, #8
 8000772:	f7ff feab 	bl	80004cc <Write_Cmd_Data>

	Write_Cmd(0xBD);
 8000776:	20bd      	movs	r0, #189	; 0xbd
 8000778:	f7ff fec8 	bl	800050c <Write_Cmd>
	Write_Cmd_Data(0x06);
 800077c:	2006      	movs	r0, #6
 800077e:	f7ff fea5 	bl	80004cc <Write_Cmd_Data>

	Write_Cmd(0xBC);
 8000782:	20bc      	movs	r0, #188	; 0xbc
 8000784:	f7ff fec2 	bl	800050c <Write_Cmd>
	Write_Cmd_Data(0x00);
 8000788:	2000      	movs	r0, #0
 800078a:	f7ff fe9f 	bl	80004cc <Write_Cmd_Data>

	Write_Cmd(0xFF);
 800078e:	20ff      	movs	r0, #255	; 0xff
 8000790:	f7ff febc 	bl	800050c <Write_Cmd>
	Write_Cmd_Data(0x60);
 8000794:	2060      	movs	r0, #96	; 0x60
 8000796:	f7ff fe99 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0x01);
 800079a:	2001      	movs	r0, #1
 800079c:	f7ff fe96 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0x04);
 80007a0:	2004      	movs	r0, #4
 80007a2:	f7ff fe93 	bl	80004cc <Write_Cmd_Data>

	Write_Cmd(0xC3);
 80007a6:	20c3      	movs	r0, #195	; 0xc3
 80007a8:	f7ff feb0 	bl	800050c <Write_Cmd>
	Write_Cmd_Data(0x13);
 80007ac:	2013      	movs	r0, #19
 80007ae:	f7ff fe8d 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd(0xC4);
 80007b2:	20c4      	movs	r0, #196	; 0xc4
 80007b4:	f7ff feaa 	bl	800050c <Write_Cmd>
	Write_Cmd_Data(0x13);
 80007b8:	2013      	movs	r0, #19
 80007ba:	f7ff fe87 	bl	80004cc <Write_Cmd_Data>

	Write_Cmd(0xC9);
 80007be:	20c9      	movs	r0, #201	; 0xc9
 80007c0:	f7ff fea4 	bl	800050c <Write_Cmd>
	Write_Cmd_Data(0x22);
 80007c4:	2022      	movs	r0, #34	; 0x22
 80007c6:	f7ff fe81 	bl	80004cc <Write_Cmd_Data>

	Write_Cmd(0xBE);
 80007ca:	20be      	movs	r0, #190	; 0xbe
 80007cc:	f7ff fe9e 	bl	800050c <Write_Cmd>
	Write_Cmd_Data(0x11);
 80007d0:	2011      	movs	r0, #17
 80007d2:	f7ff fe7b 	bl	80004cc <Write_Cmd_Data>

	Write_Cmd(0xE1);
 80007d6:	20e1      	movs	r0, #225	; 0xe1
 80007d8:	f7ff fe98 	bl	800050c <Write_Cmd>
	Write_Cmd_Data(0x10);
 80007dc:	2010      	movs	r0, #16
 80007de:	f7ff fe75 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0x0E);
 80007e2:	200e      	movs	r0, #14
 80007e4:	f7ff fe72 	bl	80004cc <Write_Cmd_Data>

	Write_Cmd(0xDF);
 80007e8:	20df      	movs	r0, #223	; 0xdf
 80007ea:	f7ff fe8f 	bl	800050c <Write_Cmd>
	Write_Cmd_Data(0x21);
 80007ee:	2021      	movs	r0, #33	; 0x21
 80007f0:	f7ff fe6c 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0x0c);
 80007f4:	200c      	movs	r0, #12
 80007f6:	f7ff fe69 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0x02);
 80007fa:	2002      	movs	r0, #2
 80007fc:	f7ff fe66 	bl	80004cc <Write_Cmd_Data>

	Write_Cmd(0xF0);
 8000800:	20f0      	movs	r0, #240	; 0xf0
 8000802:	f7ff fe83 	bl	800050c <Write_Cmd>
    Write_Cmd_Data(0x45);
 8000806:	2045      	movs	r0, #69	; 0x45
 8000808:	f7ff fe60 	bl	80004cc <Write_Cmd_Data>
    Write_Cmd_Data(0x09);
 800080c:	2009      	movs	r0, #9
 800080e:	f7ff fe5d 	bl	80004cc <Write_Cmd_Data>
 	Write_Cmd_Data(0x08);
 8000812:	2008      	movs	r0, #8
 8000814:	f7ff fe5a 	bl	80004cc <Write_Cmd_Data>
  	Write_Cmd_Data(0x08);
 8000818:	2008      	movs	r0, #8
 800081a:	f7ff fe57 	bl	80004cc <Write_Cmd_Data>
 	Write_Cmd_Data(0x26);
 800081e:	2026      	movs	r0, #38	; 0x26
 8000820:	f7ff fe54 	bl	80004cc <Write_Cmd_Data>
 	Write_Cmd_Data(0x2A);
 8000824:	202a      	movs	r0, #42	; 0x2a
 8000826:	f7ff fe51 	bl	80004cc <Write_Cmd_Data>

 	Write_Cmd(0xF1);
 800082a:	20f1      	movs	r0, #241	; 0xf1
 800082c:	f7ff fe6e 	bl	800050c <Write_Cmd>
 	Write_Cmd_Data(0x43);
 8000830:	2043      	movs	r0, #67	; 0x43
 8000832:	f7ff fe4b 	bl	80004cc <Write_Cmd_Data>
 	Write_Cmd_Data(0x70);
 8000836:	2070      	movs	r0, #112	; 0x70
 8000838:	f7ff fe48 	bl	80004cc <Write_Cmd_Data>
 	Write_Cmd_Data(0x72);
 800083c:	2072      	movs	r0, #114	; 0x72
 800083e:	f7ff fe45 	bl	80004cc <Write_Cmd_Data>
 	Write_Cmd_Data(0x36);
 8000842:	2036      	movs	r0, #54	; 0x36
 8000844:	f7ff fe42 	bl	80004cc <Write_Cmd_Data>
 	Write_Cmd_Data(0x37);
 8000848:	2037      	movs	r0, #55	; 0x37
 800084a:	f7ff fe3f 	bl	80004cc <Write_Cmd_Data>
 	Write_Cmd_Data(0x6F);
 800084e:	206f      	movs	r0, #111	; 0x6f
 8000850:	f7ff fe3c 	bl	80004cc <Write_Cmd_Data>


 	Write_Cmd(0xF2);
 8000854:	20f2      	movs	r0, #242	; 0xf2
 8000856:	f7ff fe59 	bl	800050c <Write_Cmd>
 	Write_Cmd_Data(0x45);
 800085a:	2045      	movs	r0, #69	; 0x45
 800085c:	f7ff fe36 	bl	80004cc <Write_Cmd_Data>
 	Write_Cmd_Data(0x09);
 8000860:	2009      	movs	r0, #9
 8000862:	f7ff fe33 	bl	80004cc <Write_Cmd_Data>
 	Write_Cmd_Data(0x08);
 8000866:	2008      	movs	r0, #8
 8000868:	f7ff fe30 	bl	80004cc <Write_Cmd_Data>
 	Write_Cmd_Data(0x08);
 800086c:	2008      	movs	r0, #8
 800086e:	f7ff fe2d 	bl	80004cc <Write_Cmd_Data>
 	Write_Cmd_Data(0x26);
 8000872:	2026      	movs	r0, #38	; 0x26
 8000874:	f7ff fe2a 	bl	80004cc <Write_Cmd_Data>
 	Write_Cmd_Data(0x2A);
 8000878:	202a      	movs	r0, #42	; 0x2a
 800087a:	f7ff fe27 	bl	80004cc <Write_Cmd_Data>

 	Write_Cmd(0xF3);
 800087e:	20f3      	movs	r0, #243	; 0xf3
 8000880:	f7ff fe44 	bl	800050c <Write_Cmd>
 	Write_Cmd_Data(0x43);
 8000884:	2043      	movs	r0, #67	; 0x43
 8000886:	f7ff fe21 	bl	80004cc <Write_Cmd_Data>
 	Write_Cmd_Data(0x70);
 800088a:	2070      	movs	r0, #112	; 0x70
 800088c:	f7ff fe1e 	bl	80004cc <Write_Cmd_Data>
 	Write_Cmd_Data(0x72);
 8000890:	2072      	movs	r0, #114	; 0x72
 8000892:	f7ff fe1b 	bl	80004cc <Write_Cmd_Data>
 	Write_Cmd_Data(0x36);
 8000896:	2036      	movs	r0, #54	; 0x36
 8000898:	f7ff fe18 	bl	80004cc <Write_Cmd_Data>
 	Write_Cmd_Data(0x37);
 800089c:	2037      	movs	r0, #55	; 0x37
 800089e:	f7ff fe15 	bl	80004cc <Write_Cmd_Data>
 	Write_Cmd_Data(0x6F);
 80008a2:	206f      	movs	r0, #111	; 0x6f
 80008a4:	f7ff fe12 	bl	80004cc <Write_Cmd_Data>

	Write_Cmd(0xED);
 80008a8:	20ed      	movs	r0, #237	; 0xed
 80008aa:	f7ff fe2f 	bl	800050c <Write_Cmd>
	Write_Cmd_Data(0x1B);
 80008ae:	201b      	movs	r0, #27
 80008b0:	f7ff fe0c 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0x0B);
 80008b4:	200b      	movs	r0, #11
 80008b6:	f7ff fe09 	bl	80004cc <Write_Cmd_Data>

	Write_Cmd(0xAE);
 80008ba:	20ae      	movs	r0, #174	; 0xae
 80008bc:	f7ff fe26 	bl	800050c <Write_Cmd>
	Write_Cmd_Data(0x77);
 80008c0:	2077      	movs	r0, #119	; 0x77
 80008c2:	f7ff fe03 	bl	80004cc <Write_Cmd_Data>

	Write_Cmd(0xCD);
 80008c6:	20cd      	movs	r0, #205	; 0xcd
 80008c8:	f7ff fe20 	bl	800050c <Write_Cmd>
	Write_Cmd_Data(0x63);
 80008cc:	2063      	movs	r0, #99	; 0x63
 80008ce:	f7ff fdfd 	bl	80004cc <Write_Cmd_Data>


	Write_Cmd(0x70);
 80008d2:	2070      	movs	r0, #112	; 0x70
 80008d4:	f7ff fe1a 	bl	800050c <Write_Cmd>
	Write_Cmd_Data(0x07);
 80008d8:	2007      	movs	r0, #7
 80008da:	f7ff fdf7 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0x07);
 80008de:	2007      	movs	r0, #7
 80008e0:	f7ff fdf4 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0x04);
 80008e4:	2004      	movs	r0, #4
 80008e6:	f7ff fdf1 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0x0E);
 80008ea:	200e      	movs	r0, #14
 80008ec:	f7ff fdee 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0x0F);
 80008f0:	200f      	movs	r0, #15
 80008f2:	f7ff fdeb 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0x09);
 80008f6:	2009      	movs	r0, #9
 80008f8:	f7ff fde8 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0x07);
 80008fc:	2007      	movs	r0, #7
 80008fe:	f7ff fde5 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0x08);
 8000902:	2008      	movs	r0, #8
 8000904:	f7ff fde2 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0x03);
 8000908:	2003      	movs	r0, #3
 800090a:	f7ff fddf 	bl	80004cc <Write_Cmd_Data>

	Write_Cmd(0xE8);
 800090e:	20e8      	movs	r0, #232	; 0xe8
 8000910:	f7ff fdfc 	bl	800050c <Write_Cmd>
	Write_Cmd_Data(0x34);
 8000914:	2034      	movs	r0, #52	; 0x34
 8000916:	f7ff fdd9 	bl	80004cc <Write_Cmd_Data>

	Write_Cmd(0x62);
 800091a:	2062      	movs	r0, #98	; 0x62
 800091c:	f7ff fdf6 	bl	800050c <Write_Cmd>
	Write_Cmd_Data(0x18);
 8000920:	2018      	movs	r0, #24
 8000922:	f7ff fdd3 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0x0D);
 8000926:	200d      	movs	r0, #13
 8000928:	f7ff fdd0 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0x71);
 800092c:	2071      	movs	r0, #113	; 0x71
 800092e:	f7ff fdcd 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0xED);
 8000932:	20ed      	movs	r0, #237	; 0xed
 8000934:	f7ff fdca 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0x70);
 8000938:	2070      	movs	r0, #112	; 0x70
 800093a:	f7ff fdc7 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0x70);
 800093e:	2070      	movs	r0, #112	; 0x70
 8000940:	f7ff fdc4 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0x18);
 8000944:	2018      	movs	r0, #24
 8000946:	f7ff fdc1 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0x0F);
 800094a:	200f      	movs	r0, #15
 800094c:	f7ff fdbe 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0x71);
 8000950:	2071      	movs	r0, #113	; 0x71
 8000952:	f7ff fdbb 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0xEF);
 8000956:	20ef      	movs	r0, #239	; 0xef
 8000958:	f7ff fdb8 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0x70);
 800095c:	2070      	movs	r0, #112	; 0x70
 800095e:	f7ff fdb5 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0x70);
 8000962:	2070      	movs	r0, #112	; 0x70
 8000964:	f7ff fdb2 	bl	80004cc <Write_Cmd_Data>

	Write_Cmd(0x63);
 8000968:	2063      	movs	r0, #99	; 0x63
 800096a:	f7ff fdcf 	bl	800050c <Write_Cmd>
	Write_Cmd_Data(0x18);
 800096e:	2018      	movs	r0, #24
 8000970:	f7ff fdac 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0x11);
 8000974:	2011      	movs	r0, #17
 8000976:	f7ff fda9 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0x71);
 800097a:	2071      	movs	r0, #113	; 0x71
 800097c:	f7ff fda6 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0xF1);
 8000980:	20f1      	movs	r0, #241	; 0xf1
 8000982:	f7ff fda3 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0x70);
 8000986:	2070      	movs	r0, #112	; 0x70
 8000988:	f7ff fda0 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0x70);
 800098c:	2070      	movs	r0, #112	; 0x70
 800098e:	f7ff fd9d 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0x18);
 8000992:	2018      	movs	r0, #24
 8000994:	f7ff fd9a 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0x13);
 8000998:	2013      	movs	r0, #19
 800099a:	f7ff fd97 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0x71);
 800099e:	2071      	movs	r0, #113	; 0x71
 80009a0:	f7ff fd94 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0xF3);
 80009a4:	20f3      	movs	r0, #243	; 0xf3
 80009a6:	f7ff fd91 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0x70);
 80009aa:	2070      	movs	r0, #112	; 0x70
 80009ac:	f7ff fd8e 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0x70);
 80009b0:	2070      	movs	r0, #112	; 0x70
 80009b2:	f7ff fd8b 	bl	80004cc <Write_Cmd_Data>

	Write_Cmd(0x64);
 80009b6:	2064      	movs	r0, #100	; 0x64
 80009b8:	f7ff fda8 	bl	800050c <Write_Cmd>
	Write_Cmd_Data(0x28);
 80009bc:	2028      	movs	r0, #40	; 0x28
 80009be:	f7ff fd85 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0x29);
 80009c2:	2029      	movs	r0, #41	; 0x29
 80009c4:	f7ff fd82 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0xF1);
 80009c8:	20f1      	movs	r0, #241	; 0xf1
 80009ca:	f7ff fd7f 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0x01);
 80009ce:	2001      	movs	r0, #1
 80009d0:	f7ff fd7c 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0xF1);
 80009d4:	20f1      	movs	r0, #241	; 0xf1
 80009d6:	f7ff fd79 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0x00);
 80009da:	2000      	movs	r0, #0
 80009dc:	f7ff fd76 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0x07);
 80009e0:	2007      	movs	r0, #7
 80009e2:	f7ff fd73 	bl	80004cc <Write_Cmd_Data>

	Write_Cmd(0x66);
 80009e6:	2066      	movs	r0, #102	; 0x66
 80009e8:	f7ff fd90 	bl	800050c <Write_Cmd>
	Write_Cmd_Data(0x3C);
 80009ec:	203c      	movs	r0, #60	; 0x3c
 80009ee:	f7ff fd6d 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0x00);
 80009f2:	2000      	movs	r0, #0
 80009f4:	f7ff fd6a 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0xCD);
 80009f8:	20cd      	movs	r0, #205	; 0xcd
 80009fa:	f7ff fd67 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0x67);
 80009fe:	2067      	movs	r0, #103	; 0x67
 8000a00:	f7ff fd64 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0x45);
 8000a04:	2045      	movs	r0, #69	; 0x45
 8000a06:	f7ff fd61 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0x45);
 8000a0a:	2045      	movs	r0, #69	; 0x45
 8000a0c:	f7ff fd5e 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0x10);
 8000a10:	2010      	movs	r0, #16
 8000a12:	f7ff fd5b 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0x00);
 8000a16:	2000      	movs	r0, #0
 8000a18:	f7ff fd58 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0x00);
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	f7ff fd55 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0x00);
 8000a22:	2000      	movs	r0, #0
 8000a24:	f7ff fd52 	bl	80004cc <Write_Cmd_Data>

	Write_Cmd(0x67);
 8000a28:	2067      	movs	r0, #103	; 0x67
 8000a2a:	f7ff fd6f 	bl	800050c <Write_Cmd>
	Write_Cmd_Data(0x00);
 8000a2e:	2000      	movs	r0, #0
 8000a30:	f7ff fd4c 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0x3C);
 8000a34:	203c      	movs	r0, #60	; 0x3c
 8000a36:	e001      	b.n	8000a3c <GC9A01_Initial+0x400>
 8000a38:	40020400 	.word	0x40020400
 8000a3c:	f7ff fd46 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0x00);
 8000a40:	2000      	movs	r0, #0
 8000a42:	f7ff fd43 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0x00);
 8000a46:	2000      	movs	r0, #0
 8000a48:	f7ff fd40 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0x00);
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	f7ff fd3d 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0x01);
 8000a52:	2001      	movs	r0, #1
 8000a54:	f7ff fd3a 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0x54);
 8000a58:	2054      	movs	r0, #84	; 0x54
 8000a5a:	f7ff fd37 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0x10);
 8000a5e:	2010      	movs	r0, #16
 8000a60:	f7ff fd34 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0x32);
 8000a64:	2032      	movs	r0, #50	; 0x32
 8000a66:	f7ff fd31 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0x98);
 8000a6a:	2098      	movs	r0, #152	; 0x98
 8000a6c:	f7ff fd2e 	bl	80004cc <Write_Cmd_Data>

	Write_Cmd(0x74);
 8000a70:	2074      	movs	r0, #116	; 0x74
 8000a72:	f7ff fd4b 	bl	800050c <Write_Cmd>
	Write_Cmd_Data(0x10);
 8000a76:	2010      	movs	r0, #16
 8000a78:	f7ff fd28 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0x85);
 8000a7c:	2085      	movs	r0, #133	; 0x85
 8000a7e:	f7ff fd25 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0x80);
 8000a82:	2080      	movs	r0, #128	; 0x80
 8000a84:	f7ff fd22 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0x00);
 8000a88:	2000      	movs	r0, #0
 8000a8a:	f7ff fd1f 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0x00);
 8000a8e:	2000      	movs	r0, #0
 8000a90:	f7ff fd1c 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0x4E);
 8000a94:	204e      	movs	r0, #78	; 0x4e
 8000a96:	f7ff fd19 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0x00);
 8000a9a:	2000      	movs	r0, #0
 8000a9c:	f7ff fd16 	bl	80004cc <Write_Cmd_Data>

    Write_Cmd(0x98);
 8000aa0:	2098      	movs	r0, #152	; 0x98
 8000aa2:	f7ff fd33 	bl	800050c <Write_Cmd>
	Write_Cmd_Data(0x3e);
 8000aa6:	203e      	movs	r0, #62	; 0x3e
 8000aa8:	f7ff fd10 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(0x07);
 8000aac:	2007      	movs	r0, #7
 8000aae:	f7ff fd0d 	bl	80004cc <Write_Cmd_Data>

	Write_Cmd(0x35);
 8000ab2:	2035      	movs	r0, #53	; 0x35
 8000ab4:	f7ff fd2a 	bl	800050c <Write_Cmd>
	Write_Cmd(0x21);
 8000ab8:	2021      	movs	r0, #33	; 0x21
 8000aba:	f7ff fd27 	bl	800050c <Write_Cmd>

	Write_Cmd(0x11);
 8000abe:	2011      	movs	r0, #17
 8000ac0:	f7ff fd24 	bl	800050c <Write_Cmd>
	HAL_Delay(120);
 8000ac4:	2078      	movs	r0, #120	; 0x78
 8000ac6:	f000 fcef 	bl	80014a8 <HAL_Delay>
	Write_Cmd(0x29);
 8000aca:	2029      	movs	r0, #41	; 0x29
 8000acc:	f7ff fd1e 	bl	800050c <Write_Cmd>
	HAL_Delay(20);
 8000ad0:	2014      	movs	r0, #20
 8000ad2:	f000 fce9 	bl	80014a8 <HAL_Delay>
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop

08000adc <ClearScreen>:

//===============================================================
//clear screen
//用传统方式逐个点传清除，画面刷新率很慢。
void ClearScreen(unsigned int bColor)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 unsigned int i,j;

 LCD_SetPos(0,0,GC9A01_TFTWIDTH-1,GC9A01_TFTHEIGHT-1);//240x240
 8000ae4:	23ef      	movs	r3, #239	; 0xef
 8000ae6:	22ef      	movs	r2, #239	; 0xef
 8000ae8:	2100      	movs	r1, #0
 8000aea:	2000      	movs	r0, #0
 8000aec:	f000 f8c5 	bl	8000c7a <LCD_SetPos>

 for (i=0;i<GC9A01_TFTWIDTH;i++)
 8000af0:	2300      	movs	r3, #0
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	e00e      	b.n	8000b14 <ClearScreen+0x38>
 {
	 for (j=0;j<GC9A01_TFTHEIGHT;j++)
 8000af6:	2300      	movs	r3, #0
 8000af8:	60bb      	str	r3, [r7, #8]
 8000afa:	e005      	b.n	8000b08 <ClearScreen+0x2c>
		 Write_Data_U16(bColor);
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	f7ff fd25 	bl	800054c <Write_Data_U16>
	 for (j=0;j<GC9A01_TFTHEIGHT;j++)
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	3301      	adds	r3, #1
 8000b06:	60bb      	str	r3, [r7, #8]
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	2bef      	cmp	r3, #239	; 0xef
 8000b0c:	d9f6      	bls.n	8000afc <ClearScreen+0x20>
 for (i=0;i<GC9A01_TFTWIDTH;i++)
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	3301      	adds	r3, #1
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	2bef      	cmp	r3, #239	; 0xef
 8000b18:	d9ed      	bls.n	8000af6 <ClearScreen+0x1a>
 }

}
 8000b1a:	bf00      	nop
 8000b1c:	bf00      	nop
 8000b1e:	3710      	adds	r7, #16
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}

08000b24 <ClearScreen2>:

//===============================================================
//clear screen2
//用DMA方式批量清除，画面刷新率很快。
void ClearScreen2(unsigned int bColor)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af02      	add	r7, sp, #8
 8000b2a:	6078      	str	r0, [r7, #4]
	ClearWindow(0,0,GC9A01_TFTWIDTH,GC9A01_TFTHEIGHT,bColor);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	9300      	str	r3, [sp, #0]
 8000b30:	23f0      	movs	r3, #240	; 0xf0
 8000b32:	22f0      	movs	r2, #240	; 0xf0
 8000b34:	2100      	movs	r1, #0
 8000b36:	2000      	movs	r0, #0
 8000b38:	f000 f804 	bl	8000b44 <ClearWindow>
}
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <ClearWindow>:

void ClearWindow(unsigned int startX, unsigned int startY, unsigned int endX, unsigned int endY, unsigned int bColor)
{
 8000b44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b48:	b08f      	sub	sp, #60	; 0x3c
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	60f8      	str	r0, [r7, #12]
 8000b4e:	60b9      	str	r1, [r7, #8]
 8000b50:	607a      	str	r2, [r7, #4]
 8000b52:	603b      	str	r3, [r7, #0]
 8000b54:	466b      	mov	r3, sp
 8000b56:	461e      	mov	r6, r3
 unsigned int i;

 //以下对传入的16位bColor进行高低8位互换，以方便DMA批量传数据。
 unsigned char hb = (bColor&0xFFFF) >> 8;
 8000b58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b5a:	0a1b      	lsrs	r3, r3, #8
 8000b5c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 unsigned char lb = bColor & 0xFF;
 8000b60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b62:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 unsigned short tempColor = lb * 256 + hb;
 8000b66:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8000b6a:	b29b      	uxth	r3, r3
 8000b6c:	021b      	lsls	r3, r3, #8
 8000b6e:	b29a      	uxth	r2, r3
 8000b70:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b74:	b29b      	uxth	r3, r3
 8000b76:	4413      	add	r3, r2
 8000b78:	863b      	strh	r3, [r7, #48]	; 0x30
 unsigned int totalSize = (endX-startX) * (endY - startY) * 2;
 8000b7a:	687a      	ldr	r2, [r7, #4]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	1ad3      	subs	r3, r2, r3
 8000b80:	6839      	ldr	r1, [r7, #0]
 8000b82:	68ba      	ldr	r2, [r7, #8]
 8000b84:	1a8a      	subs	r2, r1, r2
 8000b86:	fb02 f303 	mul.w	r3, r2, r3
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 unsigned int bufSize = 512;
 8000b8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b92:	62bb      	str	r3, [r7, #40]	; 0x28

 unsigned int loopNum = (totalSize - (totalSize % bufSize)) / bufSize;
 8000b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b98:	fbb3 f2f2 	udiv	r2, r3, r2
 8000b9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000b9e:	fb01 f202 	mul.w	r2, r1, r2
 8000ba2:	1a9b      	subs	r3, r3, r2
 8000ba4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ba6:	1ad2      	subs	r2, r2, r3
 8000ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bae:	627b      	str	r3, [r7, #36]	; 0x24
 unsigned int modNum = totalSize % bufSize;
 8000bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000bb4:	fbb3 f2f2 	udiv	r2, r3, r2
 8000bb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000bba:	fb01 f202 	mul.w	r2, r1, r2
 8000bbe:	1a9b      	subs	r3, r3, r2
 8000bc0:	623b      	str	r3, [r7, #32]


 //定义数据缓冲区及数据缓冲区指针，一次传输bufSize个字节，缓冲区尺寸可配置bufSize，需要满足单次DMA传输数据量限制。
 unsigned short tempBuf[bufSize];
 8000bc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000bc4:	460b      	mov	r3, r1
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	61fb      	str	r3, [r7, #28]
 8000bca:	2300      	movs	r3, #0
 8000bcc:	4688      	mov	r8, r1
 8000bce:	4699      	mov	r9, r3
 8000bd0:	f04f 0200 	mov.w	r2, #0
 8000bd4:	f04f 0300 	mov.w	r3, #0
 8000bd8:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8000bdc:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8000be0:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8000be4:	2300      	movs	r3, #0
 8000be6:	460c      	mov	r4, r1
 8000be8:	461d      	mov	r5, r3
 8000bea:	f04f 0200 	mov.w	r2, #0
 8000bee:	f04f 0300 	mov.w	r3, #0
 8000bf2:	012b      	lsls	r3, r5, #4
 8000bf4:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000bf8:	0122      	lsls	r2, r4, #4
 8000bfa:	004b      	lsls	r3, r1, #1
 8000bfc:	3307      	adds	r3, #7
 8000bfe:	08db      	lsrs	r3, r3, #3
 8000c00:	00db      	lsls	r3, r3, #3
 8000c02:	ebad 0d03 	sub.w	sp, sp, r3
 8000c06:	466b      	mov	r3, sp
 8000c08:	3301      	adds	r3, #1
 8000c0a:	085b      	lsrs	r3, r3, #1
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	61bb      	str	r3, [r7, #24]
 unsigned char * ptempBuf;

 //由于DMA单次传输数据的容量问题，，一次传输bufSize个字节。
 for(i=0; i<bufSize; i++){
 8000c10:	2300      	movs	r3, #0
 8000c12:	637b      	str	r3, [r7, #52]	; 0x34
 8000c14:	e007      	b.n	8000c26 <ClearWindow+0xe2>
	 tempBuf[i] = tempColor;
 8000c16:	69bb      	ldr	r3, [r7, #24]
 8000c18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000c1a:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 8000c1c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 for(i=0; i<bufSize; i++){
 8000c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c22:	3301      	adds	r3, #1
 8000c24:	637b      	str	r3, [r7, #52]	; 0x34
 8000c26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	d3f3      	bcc.n	8000c16 <ClearWindow+0xd2>
 }

 //定义要清除的屏幕范围
 LCD_SetPos(startX,startY,endX-1,endY-1);// (endX-startX) * (endY - startY)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	1e5a      	subs	r2, r3, #1
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	3b01      	subs	r3, #1
 8000c36:	68b9      	ldr	r1, [r7, #8]
 8000c38:	68f8      	ldr	r0, [r7, #12]
 8000c3a:	f000 f81e 	bl	8000c7a <LCD_SetPos>

 //由于DMA单次传输数据的容量问题，一次传输bufSize个字节。
 ptempBuf = (unsigned char *)tempBuf;
 8000c3e:	69bb      	ldr	r3, [r7, #24]
 8000c40:	617b      	str	r3, [r7, #20]
 for(i=0; i<loopNum; i++){
 8000c42:	2300      	movs	r3, #0
 8000c44:	637b      	str	r3, [r7, #52]	; 0x34
 8000c46:	e008      	b.n	8000c5a <ClearWindow+0x116>
	 Write_Bytes(ptempBuf, bufSize);
 8000c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c4a:	b29b      	uxth	r3, r3
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	6978      	ldr	r0, [r7, #20]
 8000c50:	f7ff fcb8 	bl	80005c4 <Write_Bytes>
 for(i=0; i<loopNum; i++){
 8000c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c56:	3301      	adds	r3, #1
 8000c58:	637b      	str	r3, [r7, #52]	; 0x34
 8000c5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	d3f2      	bcc.n	8000c48 <ClearWindow+0x104>
 }
 Write_Bytes(ptempBuf, modNum);
 8000c62:	6a3b      	ldr	r3, [r7, #32]
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	4619      	mov	r1, r3
 8000c68:	6978      	ldr	r0, [r7, #20]
 8000c6a:	f7ff fcab 	bl	80005c4 <Write_Bytes>
 8000c6e:	46b5      	mov	sp, r6

}
 8000c70:	bf00      	nop
 8000c72:	373c      	adds	r7, #60	; 0x3c
 8000c74:	46bd      	mov	sp, r7
 8000c76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000c7a <LCD_SetPos>:


//===============================================================
 void LCD_SetPos(unsigned int Xstart,unsigned int Ystart,unsigned int Xend,unsigned int Yend)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b084      	sub	sp, #16
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	60f8      	str	r0, [r7, #12]
 8000c82:	60b9      	str	r1, [r7, #8]
 8000c84:	607a      	str	r2, [r7, #4]
 8000c86:	603b      	str	r3, [r7, #0]
	Write_Cmd(0x2a);
 8000c88:	202a      	movs	r0, #42	; 0x2a
 8000c8a:	f7ff fc3f 	bl	800050c <Write_Cmd>
	Write_Cmd_Data(Xstart>>8);
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	0a1b      	lsrs	r3, r3, #8
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff fc19 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(Xstart);
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff fc14 	bl	80004cc <Write_Cmd_Data>
 	Write_Cmd_Data(Xend>>8);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	0a1b      	lsrs	r3, r3, #8
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff fc0e 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(Xend);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff fc09 	bl	80004cc <Write_Cmd_Data>

	Write_Cmd(0x2b);
 8000cba:	202b      	movs	r0, #43	; 0x2b
 8000cbc:	f7ff fc26 	bl	800050c <Write_Cmd>
	Write_Cmd_Data(Ystart>>8);
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	0a1b      	lsrs	r3, r3, #8
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff fc00 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(Ystart);
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff fbfb 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(Yend>>8);
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	0a1b      	lsrs	r3, r3, #8
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff fbf5 	bl	80004cc <Write_Cmd_Data>
	Write_Cmd_Data(Yend);
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fbf0 	bl	80004cc <Write_Cmd_Data>

  	Write_Cmd(0x2c);//LCD_WriteCMD(GRAMWR);
 8000cec:	202c      	movs	r0, #44	; 0x2c
 8000cee:	f7ff fc0d 	bl	800050c <Write_Cmd>
}
 8000cf2:	bf00      	nop
 8000cf4:	3710      	adds	r7, #16
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
	...

08000cfc <show_picture>:

 //============================================================
 //show picture
 //用传统方式逐个点传数据，画面刷新率很慢。
 void show_picture(void)
 {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 	unsigned char i,j;
 	unsigned int n=0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	603b      	str	r3, [r7, #0]


    LCD_SetPos(60,40,179,199);
 8000d06:	23c7      	movs	r3, #199	; 0xc7
 8000d08:	22b3      	movs	r2, #179	; 0xb3
 8000d0a:	2128      	movs	r1, #40	; 0x28
 8000d0c:	203c      	movs	r0, #60	; 0x3c
 8000d0e:	f7ff ffb4 	bl	8000c7a <LCD_SetPos>

 	for(j=0;j<160;j++)
 8000d12:	2300      	movs	r3, #0
 8000d14:	71bb      	strb	r3, [r7, #6]
 8000d16:	e014      	b.n	8000d42 <show_picture+0x46>
 	{
 		for(i=0;i<120;i++)
 8000d18:	2300      	movs	r3, #0
 8000d1a:	71fb      	strb	r3, [r7, #7]
 8000d1c:	e00b      	b.n	8000d36 <show_picture+0x3a>
 		{
             Write_Data_U16(pic[n++]);
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	1c5a      	adds	r2, r3, #1
 8000d22:	603a      	str	r2, [r7, #0]
 8000d24:	4a0a      	ldr	r2, [pc, #40]	; (8000d50 <show_picture+0x54>)
 8000d26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff fc0e 	bl	800054c <Write_Data_U16>
 		for(i=0;i<120;i++)
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	3301      	adds	r3, #1
 8000d34:	71fb      	strb	r3, [r7, #7]
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	2b77      	cmp	r3, #119	; 0x77
 8000d3a:	d9f0      	bls.n	8000d1e <show_picture+0x22>
 	for(j=0;j<160;j++)
 8000d3c:	79bb      	ldrb	r3, [r7, #6]
 8000d3e:	3301      	adds	r3, #1
 8000d40:	71bb      	strb	r3, [r7, #6]
 8000d42:	79bb      	ldrb	r3, [r7, #6]
 8000d44:	2b9f      	cmp	r3, #159	; 0x9f
 8000d46:	d9e7      	bls.n	8000d18 <show_picture+0x1c>
 	    }
 	}

     return;
 8000d48:	bf00      	nop
 }
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20000000 	.word	0x20000000

08000d54 <show_picture2>:


 //用DMA批量传数据，画面刷新率提升很多。
 void show_picture2(void)
 {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af00      	add	r7, sp, #0
	 int i;
	 unsigned char * pPic;
	 unsigned int totalSize = 160*120*2;
 8000d5a:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8000d5e:	613b      	str	r3, [r7, #16]
	 unsigned int bufSize = 512; //bufSize可自定义，不要超出一次DMA传输的数据量大小。
 8000d60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d64:	60fb      	str	r3, [r7, #12]

 	 unsigned int loopNum = (totalSize - (totalSize % bufSize)) / bufSize;
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	68fa      	ldr	r2, [r7, #12]
 8000d6a:	fbb3 f2f2 	udiv	r2, r3, r2
 8000d6e:	68f9      	ldr	r1, [r7, #12]
 8000d70:	fb01 f202 	mul.w	r2, r1, r2
 8000d74:	1a9b      	subs	r3, r3, r2
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	1ad2      	subs	r2, r2, r3
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d80:	60bb      	str	r3, [r7, #8]
 	 unsigned int modNum = totalSize % bufSize;
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	68fa      	ldr	r2, [r7, #12]
 8000d86:	fbb3 f2f2 	udiv	r2, r3, r2
 8000d8a:	68f9      	ldr	r1, [r7, #12]
 8000d8c:	fb01 f202 	mul.w	r2, r1, r2
 8000d90:	1a9b      	subs	r3, r3, r2
 8000d92:	607b      	str	r3, [r7, #4]


    LCD_SetPos(60,40,179,199);
 8000d94:	23c7      	movs	r3, #199	; 0xc7
 8000d96:	22b3      	movs	r2, #179	; 0xb3
 8000d98:	2128      	movs	r1, #40	; 0x28
 8000d9a:	203c      	movs	r0, #60	; 0x3c
 8000d9c:	f7ff ff6d 	bl	8000c7a <LCD_SetPos>

    //将每个点的图像数据交换高/低8位。以方便DMA批量传输显示。
    inversPicData();
 8000da0:	f000 f82c 	bl	8000dfc <inversPicData>

    pPic = (unsigned char *)pic;
 8000da4:	4b14      	ldr	r3, [pc, #80]	; (8000df8 <show_picture2+0xa4>)
 8000da6:	603b      	str	r3, [r7, #0]

    //由于DMA传输数据的size问题，一次传bufSize个字节，循环loopNum次。
    for(i=0; i<loopNum; i++){
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]
 8000dac:	e00e      	b.n	8000dcc <show_picture2+0x78>
    	Write_Bytes(pPic+i*bufSize, bufSize);
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	68fa      	ldr	r2, [r7, #12]
 8000db2:	fb02 f303 	mul.w	r3, r2, r3
 8000db6:	683a      	ldr	r2, [r7, #0]
 8000db8:	4413      	add	r3, r2
 8000dba:	68fa      	ldr	r2, [r7, #12]
 8000dbc:	b292      	uxth	r2, r2
 8000dbe:	4611      	mov	r1, r2
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff fbff 	bl	80005c4 <Write_Bytes>
    for(i=0; i<loopNum; i++){
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	617b      	str	r3, [r7, #20]
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	68ba      	ldr	r2, [r7, #8]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d8ec      	bhi.n	8000dae <show_picture2+0x5a>
    }
    //最后传余下的modNum个字节。
    Write_Bytes(pPic+i*bufSize, modNum);
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	68fa      	ldr	r2, [r7, #12]
 8000dd8:	fb02 f303 	mul.w	r3, r2, r3
 8000ddc:	683a      	ldr	r2, [r7, #0]
 8000dde:	4413      	add	r3, r2
 8000de0:	687a      	ldr	r2, [r7, #4]
 8000de2:	b292      	uxth	r2, r2
 8000de4:	4611      	mov	r1, r2
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff fbec 	bl	80005c4 <Write_Bytes>

    //将每个点的图像数据交换高/低8位。恢复原状。
    inversPicData();
 8000dec:	f000 f806 	bl	8000dfc <inversPicData>

    return;
 8000df0:	bf00      	nop
 }
 8000df2:	3718      	adds	r7, #24
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20000000 	.word	0x20000000

08000dfc <inversPicData>:

 //为了满足用DMA批量传数据，需要将pic数据中每个16位的高低8位对换。
 void inversPicData(void){
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 	int i;
 	unsigned char hb, lb;

 	for(i=0; i<160*120; i++){  			//160*120为画面尺寸
 8000e02:	2300      	movs	r3, #0
 8000e04:	607b      	str	r3, [r7, #4]
 8000e06:	e01a      	b.n	8000e3e <inversPicData+0x42>
 			hb = pic[i] >> 8;  			//取得高8位
 8000e08:	4a12      	ldr	r2, [pc, #72]	; (8000e54 <inversPicData+0x58>)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e10:	0a1b      	lsrs	r3, r3, #8
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	70fb      	strb	r3, [r7, #3]
 			lb = pic[i] & 0xFF; 		//取得低8位
 8000e16:	4a0f      	ldr	r2, [pc, #60]	; (8000e54 <inversPicData+0x58>)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e1e:	70bb      	strb	r3, [r7, #2]
 			pic[i] = lb * 256 + hb; 	//高低8位对换
 8000e20:	78bb      	ldrb	r3, [r7, #2]
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	021b      	lsls	r3, r3, #8
 8000e26:	b29a      	uxth	r2, r3
 8000e28:	78fb      	ldrb	r3, [r7, #3]
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	4413      	add	r3, r2
 8000e2e:	b299      	uxth	r1, r3
 8000e30:	4a08      	ldr	r2, [pc, #32]	; (8000e54 <inversPicData+0x58>)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 	for(i=0; i<160*120; i++){  			//160*120为画面尺寸
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	607b      	str	r3, [r7, #4]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
 8000e44:	dbe0      	blt.n	8000e08 <inversPicData+0xc>
 	}
 }
 8000e46:	bf00      	nop
 8000e48:	bf00      	nop
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	20000000 	.word	0x20000000

08000e58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	607b      	str	r3, [r7, #4]
 8000e62:	4b10      	ldr	r3, [pc, #64]	; (8000ea4 <MX_DMA_Init+0x4c>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	4a0f      	ldr	r2, [pc, #60]	; (8000ea4 <MX_DMA_Init+0x4c>)
 8000e68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ea4 <MX_DMA_Init+0x4c>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e76:	607b      	str	r3, [r7, #4]
 8000e78:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	2038      	movs	r0, #56	; 0x38
 8000e80:	f000 fc11 	bl	80016a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000e84:	2038      	movs	r0, #56	; 0x38
 8000e86:	f000 fc2a 	bl	80016de <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	203b      	movs	r0, #59	; 0x3b
 8000e90:	f000 fc09 	bl	80016a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000e94:	203b      	movs	r0, #59	; 0x3b
 8000e96:	f000 fc22 	bl	80016de <HAL_NVIC_EnableIRQ>

}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40023800 	.word	0x40023800

08000ea8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b088      	sub	sp, #32
 8000eac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eae:	f107 030c 	add.w	r3, r7, #12
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	609a      	str	r2, [r3, #8]
 8000eba:	60da      	str	r2, [r3, #12]
 8000ebc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	4b20      	ldr	r3, [pc, #128]	; (8000f44 <MX_GPIO_Init+0x9c>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	4a1f      	ldr	r2, [pc, #124]	; (8000f44 <MX_GPIO_Init+0x9c>)
 8000ec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ece:	4b1d      	ldr	r3, [pc, #116]	; (8000f44 <MX_GPIO_Init+0x9c>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ed6:	60bb      	str	r3, [r7, #8]
 8000ed8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	607b      	str	r3, [r7, #4]
 8000ede:	4b19      	ldr	r3, [pc, #100]	; (8000f44 <MX_GPIO_Init+0x9c>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	4a18      	ldr	r2, [pc, #96]	; (8000f44 <MX_GPIO_Init+0x9c>)
 8000ee4:	f043 0301 	orr.w	r3, r3, #1
 8000ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eea:	4b16      	ldr	r3, [pc, #88]	; (8000f44 <MX_GPIO_Init+0x9c>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	607b      	str	r3, [r7, #4]
 8000ef4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	603b      	str	r3, [r7, #0]
 8000efa:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <MX_GPIO_Init+0x9c>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	4a11      	ldr	r2, [pc, #68]	; (8000f44 <MX_GPIO_Init+0x9c>)
 8000f00:	f043 0302 	orr.w	r3, r3, #2
 8000f04:	6313      	str	r3, [r2, #48]	; 0x30
 8000f06:	4b0f      	ldr	r3, [pc, #60]	; (8000f44 <MX_GPIO_Init+0x9c>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	f003 0302 	and.w	r3, r3, #2
 8000f0e:	603b      	str	r3, [r7, #0]
 8000f10:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_DC_Pin|LCD_CS_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8000f12:	2200      	movs	r2, #0
 8000f14:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8000f18:	480b      	ldr	r0, [pc, #44]	; (8000f48 <MX_GPIO_Init+0xa0>)
 8000f1a:	f001 f929 	bl	8002170 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_CS_Pin|LCD_RST_Pin;
 8000f1e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000f22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f24:	2301      	movs	r3, #1
 8000f26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f30:	f107 030c 	add.w	r3, r7, #12
 8000f34:	4619      	mov	r1, r3
 8000f36:	4804      	ldr	r0, [pc, #16]	; (8000f48 <MX_GPIO_Init+0xa0>)
 8000f38:	f000 ff7e 	bl	8001e38 <HAL_GPIO_Init>

}
 8000f3c:	bf00      	nop
 8000f3e:	3720      	adds	r7, #32
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40023800 	.word	0x40023800
 8000f48:	40020400 	.word	0x40020400

08000f4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f52:	f000 fa37 	bl	80013c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f56:	f000 f82d 	bl	8000fb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f5a:	f7ff ffa5 	bl	8000ea8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f5e:	f7ff ff7b 	bl	8000e58 <MX_DMA_Init>
  MX_SPI1_Init();
 8000f62:	f000 f897 	bl	8001094 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  GC9A01_Initial();
 8000f66:	f7ff fb69 	bl	800063c <GC9A01_Initial>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	//不使用DMA时的清屏和显示图片的速度。
	ClearScreen(GREEN);
 8000f6a:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8000f6e:	f7ff fdb5 	bl	8000adc <ClearScreen>
	show_picture();
 8000f72:	f7ff fec3 	bl	8000cfc <show_picture>

	//使用DMA时清屏和显示图片速度很快。
	HAL_Delay(1000);
 8000f76:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f7a:	f000 fa95 	bl	80014a8 <HAL_Delay>
	ClearScreen2(WHITE);
 8000f7e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000f82:	f7ff fdcf 	bl	8000b24 <ClearScreen2>
	show_picture2();
 8000f86:	f7ff fee5 	bl	8000d54 <show_picture2>
	HAL_Delay(1000);
 8000f8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f8e:	f000 fa8b 	bl	80014a8 <HAL_Delay>

	//使用DMA时清屏和显示图片速度很快。
	//ClearScreen2(YELLOW);
	ClearWindow(0, 0, GC9A01_TFTWIDTH, GC9A01_TFTHEIGHT, YELLOW);
 8000f92:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000f96:	9300      	str	r3, [sp, #0]
 8000f98:	23f0      	movs	r3, #240	; 0xf0
 8000f9a:	22f0      	movs	r2, #240	; 0xf0
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	f7ff fdd0 	bl	8000b44 <ClearWindow>
	show_picture2();
 8000fa4:	f7ff fed6 	bl	8000d54 <show_picture2>
	HAL_Delay(1000);
 8000fa8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fac:	f000 fa7c 	bl	80014a8 <HAL_Delay>
	ClearScreen(GREEN);
 8000fb0:	e7db      	b.n	8000f6a <main+0x1e>
	...

08000fb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b094      	sub	sp, #80	; 0x50
 8000fb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fba:	f107 0320 	add.w	r3, r7, #32
 8000fbe:	2230      	movs	r2, #48	; 0x30
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f002 f942 	bl	800324c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc8:	f107 030c 	add.w	r3, r7, #12
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd8:	2300      	movs	r3, #0
 8000fda:	60bb      	str	r3, [r7, #8]
 8000fdc:	4b28      	ldr	r3, [pc, #160]	; (8001080 <SystemClock_Config+0xcc>)
 8000fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe0:	4a27      	ldr	r2, [pc, #156]	; (8001080 <SystemClock_Config+0xcc>)
 8000fe2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fe6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe8:	4b25      	ldr	r3, [pc, #148]	; (8001080 <SystemClock_Config+0xcc>)
 8000fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff0:	60bb      	str	r3, [r7, #8]
 8000ff2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	607b      	str	r3, [r7, #4]
 8000ff8:	4b22      	ldr	r3, [pc, #136]	; (8001084 <SystemClock_Config+0xd0>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a21      	ldr	r2, [pc, #132]	; (8001084 <SystemClock_Config+0xd0>)
 8000ffe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001002:	6013      	str	r3, [r2, #0]
 8001004:	4b1f      	ldr	r3, [pc, #124]	; (8001084 <SystemClock_Config+0xd0>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800100c:	607b      	str	r3, [r7, #4]
 800100e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001010:	2302      	movs	r3, #2
 8001012:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001014:	2301      	movs	r3, #1
 8001016:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001018:	2310      	movs	r3, #16
 800101a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800101c:	2302      	movs	r3, #2
 800101e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001020:	2300      	movs	r3, #0
 8001022:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001024:	2308      	movs	r3, #8
 8001026:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001028:	23a8      	movs	r3, #168	; 0xa8
 800102a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800102c:	2302      	movs	r3, #2
 800102e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001030:	2304      	movs	r3, #4
 8001032:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001034:	f107 0320 	add.w	r3, r7, #32
 8001038:	4618      	mov	r0, r3
 800103a:	f001 f8b3 	bl	80021a4 <HAL_RCC_OscConfig>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001044:	f000 f820 	bl	8001088 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001048:	230f      	movs	r3, #15
 800104a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800104c:	2302      	movs	r3, #2
 800104e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001054:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001058:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800105a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800105e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001060:	f107 030c 	add.w	r3, r7, #12
 8001064:	2105      	movs	r1, #5
 8001066:	4618      	mov	r0, r3
 8001068:	f001 fb14 	bl	8002694 <HAL_RCC_ClockConfig>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001072:	f000 f809 	bl	8001088 <Error_Handler>
  }
}
 8001076:	bf00      	nop
 8001078:	3750      	adds	r7, #80	; 0x50
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40023800 	.word	0x40023800
 8001084:	40007000 	.word	0x40007000

08001088 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800108c:	b672      	cpsid	i
}
 800108e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001090:	e7fe      	b.n	8001090 <Error_Handler+0x8>
	...

08001094 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi1_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001098:	4b17      	ldr	r3, [pc, #92]	; (80010f8 <MX_SPI1_Init+0x64>)
 800109a:	4a18      	ldr	r2, [pc, #96]	; (80010fc <MX_SPI1_Init+0x68>)
 800109c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800109e:	4b16      	ldr	r3, [pc, #88]	; (80010f8 <MX_SPI1_Init+0x64>)
 80010a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010a6:	4b14      	ldr	r3, [pc, #80]	; (80010f8 <MX_SPI1_Init+0x64>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010ac:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <MX_SPI1_Init+0x64>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010b2:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <MX_SPI1_Init+0x64>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010b8:	4b0f      	ldr	r3, [pc, #60]	; (80010f8 <MX_SPI1_Init+0x64>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010be:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <MX_SPI1_Init+0x64>)
 80010c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010c6:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <MX_SPI1_Init+0x64>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010cc:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <MX_SPI1_Init+0x64>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010d2:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <MX_SPI1_Init+0x64>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010d8:	4b07      	ldr	r3, [pc, #28]	; (80010f8 <MX_SPI1_Init+0x64>)
 80010da:	2200      	movs	r2, #0
 80010dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010de:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <MX_SPI1_Init+0x64>)
 80010e0:	220a      	movs	r2, #10
 80010e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010e4:	4804      	ldr	r0, [pc, #16]	; (80010f8 <MX_SPI1_Init+0x64>)
 80010e6:	f001 fcc1 	bl	8002a6c <HAL_SPI_Init>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80010f0:	f7ff ffca 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20009628 	.word	0x20009628
 80010fc:	40013000 	.word	0x40013000

08001100 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08a      	sub	sp, #40	; 0x28
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a4c      	ldr	r2, [pc, #304]	; (8001250 <HAL_SPI_MspInit+0x150>)
 800111e:	4293      	cmp	r3, r2
 8001120:	f040 8092 	bne.w	8001248 <HAL_SPI_MspInit+0x148>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001124:	2300      	movs	r3, #0
 8001126:	613b      	str	r3, [r7, #16]
 8001128:	4b4a      	ldr	r3, [pc, #296]	; (8001254 <HAL_SPI_MspInit+0x154>)
 800112a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112c:	4a49      	ldr	r2, [pc, #292]	; (8001254 <HAL_SPI_MspInit+0x154>)
 800112e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001132:	6453      	str	r3, [r2, #68]	; 0x44
 8001134:	4b47      	ldr	r3, [pc, #284]	; (8001254 <HAL_SPI_MspInit+0x154>)
 8001136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001138:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800113c:	613b      	str	r3, [r7, #16]
 800113e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001140:	2300      	movs	r3, #0
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	4b43      	ldr	r3, [pc, #268]	; (8001254 <HAL_SPI_MspInit+0x154>)
 8001146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001148:	4a42      	ldr	r2, [pc, #264]	; (8001254 <HAL_SPI_MspInit+0x154>)
 800114a:	f043 0302 	orr.w	r3, r3, #2
 800114e:	6313      	str	r3, [r2, #48]	; 0x30
 8001150:	4b40      	ldr	r3, [pc, #256]	; (8001254 <HAL_SPI_MspInit+0x154>)
 8001152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001154:	f003 0302 	and.w	r3, r3, #2
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800115c:	2338      	movs	r3, #56	; 0x38
 800115e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001160:	2302      	movs	r3, #2
 8001162:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001168:	2303      	movs	r3, #3
 800116a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800116c:	2305      	movs	r3, #5
 800116e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	4619      	mov	r1, r3
 8001176:	4838      	ldr	r0, [pc, #224]	; (8001258 <HAL_SPI_MspInit+0x158>)
 8001178:	f000 fe5e 	bl	8001e38 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800117c:	4b37      	ldr	r3, [pc, #220]	; (800125c <HAL_SPI_MspInit+0x15c>)
 800117e:	4a38      	ldr	r2, [pc, #224]	; (8001260 <HAL_SPI_MspInit+0x160>)
 8001180:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001182:	4b36      	ldr	r3, [pc, #216]	; (800125c <HAL_SPI_MspInit+0x15c>)
 8001184:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001188:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800118a:	4b34      	ldr	r3, [pc, #208]	; (800125c <HAL_SPI_MspInit+0x15c>)
 800118c:	2240      	movs	r2, #64	; 0x40
 800118e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001190:	4b32      	ldr	r3, [pc, #200]	; (800125c <HAL_SPI_MspInit+0x15c>)
 8001192:	2200      	movs	r2, #0
 8001194:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001196:	4b31      	ldr	r3, [pc, #196]	; (800125c <HAL_SPI_MspInit+0x15c>)
 8001198:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800119c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800119e:	4b2f      	ldr	r3, [pc, #188]	; (800125c <HAL_SPI_MspInit+0x15c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011a4:	4b2d      	ldr	r3, [pc, #180]	; (800125c <HAL_SPI_MspInit+0x15c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80011aa:	4b2c      	ldr	r3, [pc, #176]	; (800125c <HAL_SPI_MspInit+0x15c>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80011b0:	4b2a      	ldr	r3, [pc, #168]	; (800125c <HAL_SPI_MspInit+0x15c>)
 80011b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011b6:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011b8:	4b28      	ldr	r3, [pc, #160]	; (800125c <HAL_SPI_MspInit+0x15c>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80011be:	4827      	ldr	r0, [pc, #156]	; (800125c <HAL_SPI_MspInit+0x15c>)
 80011c0:	f000 faa8 	bl	8001714 <HAL_DMA_Init>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 80011ca:	f7ff ff5d 	bl	8001088 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a22      	ldr	r2, [pc, #136]	; (800125c <HAL_SPI_MspInit+0x15c>)
 80011d2:	649a      	str	r2, [r3, #72]	; 0x48
 80011d4:	4a21      	ldr	r2, [pc, #132]	; (800125c <HAL_SPI_MspInit+0x15c>)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80011da:	4b22      	ldr	r3, [pc, #136]	; (8001264 <HAL_SPI_MspInit+0x164>)
 80011dc:	4a22      	ldr	r2, [pc, #136]	; (8001268 <HAL_SPI_MspInit+0x168>)
 80011de:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80011e0:	4b20      	ldr	r3, [pc, #128]	; (8001264 <HAL_SPI_MspInit+0x164>)
 80011e2:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80011e6:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011e8:	4b1e      	ldr	r3, [pc, #120]	; (8001264 <HAL_SPI_MspInit+0x164>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011ee:	4b1d      	ldr	r3, [pc, #116]	; (8001264 <HAL_SPI_MspInit+0x164>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011f4:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <HAL_SPI_MspInit+0x164>)
 80011f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011fa:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011fc:	4b19      	ldr	r3, [pc, #100]	; (8001264 <HAL_SPI_MspInit+0x164>)
 80011fe:	2200      	movs	r2, #0
 8001200:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001202:	4b18      	ldr	r3, [pc, #96]	; (8001264 <HAL_SPI_MspInit+0x164>)
 8001204:	2200      	movs	r2, #0
 8001206:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001208:	4b16      	ldr	r3, [pc, #88]	; (8001264 <HAL_SPI_MspInit+0x164>)
 800120a:	2200      	movs	r2, #0
 800120c:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800120e:	4b15      	ldr	r3, [pc, #84]	; (8001264 <HAL_SPI_MspInit+0x164>)
 8001210:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001214:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001216:	4b13      	ldr	r3, [pc, #76]	; (8001264 <HAL_SPI_MspInit+0x164>)
 8001218:	2200      	movs	r2, #0
 800121a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800121c:	4811      	ldr	r0, [pc, #68]	; (8001264 <HAL_SPI_MspInit+0x164>)
 800121e:	f000 fa79 	bl	8001714 <HAL_DMA_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <HAL_SPI_MspInit+0x12c>
    {
      Error_Handler();
 8001228:	f7ff ff2e 	bl	8001088 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4a0d      	ldr	r2, [pc, #52]	; (8001264 <HAL_SPI_MspInit+0x164>)
 8001230:	64da      	str	r2, [r3, #76]	; 0x4c
 8001232:	4a0c      	ldr	r2, [pc, #48]	; (8001264 <HAL_SPI_MspInit+0x164>)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001238:	2200      	movs	r2, #0
 800123a:	2100      	movs	r1, #0
 800123c:	2023      	movs	r0, #35	; 0x23
 800123e:	f000 fa32 	bl	80016a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001242:	2023      	movs	r0, #35	; 0x23
 8001244:	f000 fa4b 	bl	80016de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001248:	bf00      	nop
 800124a:	3728      	adds	r7, #40	; 0x28
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40013000 	.word	0x40013000
 8001254:	40023800 	.word	0x40023800
 8001258:	40020400 	.word	0x40020400
 800125c:	20009680 	.word	0x20009680
 8001260:	40026458 	.word	0x40026458
 8001264:	200096e0 	.word	0x200096e0
 8001268:	40026410 	.word	0x40026410

0800126c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	607b      	str	r3, [r7, #4]
 8001276:	4b10      	ldr	r3, [pc, #64]	; (80012b8 <HAL_MspInit+0x4c>)
 8001278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127a:	4a0f      	ldr	r2, [pc, #60]	; (80012b8 <HAL_MspInit+0x4c>)
 800127c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001280:	6453      	str	r3, [r2, #68]	; 0x44
 8001282:	4b0d      	ldr	r3, [pc, #52]	; (80012b8 <HAL_MspInit+0x4c>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001286:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800128a:	607b      	str	r3, [r7, #4]
 800128c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	603b      	str	r3, [r7, #0]
 8001292:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <HAL_MspInit+0x4c>)
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	4a08      	ldr	r2, [pc, #32]	; (80012b8 <HAL_MspInit+0x4c>)
 8001298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800129c:	6413      	str	r3, [r2, #64]	; 0x40
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <HAL_MspInit+0x4c>)
 80012a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a6:	603b      	str	r3, [r7, #0]
 80012a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	40023800 	.word	0x40023800

080012bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012c0:	e7fe      	b.n	80012c0 <NMI_Handler+0x4>

080012c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012c2:	b480      	push	{r7}
 80012c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012c6:	e7fe      	b.n	80012c6 <HardFault_Handler+0x4>

080012c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012cc:	e7fe      	b.n	80012cc <MemManage_Handler+0x4>

080012ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012d2:	e7fe      	b.n	80012d2 <BusFault_Handler+0x4>

080012d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d8:	e7fe      	b.n	80012d8 <UsageFault_Handler+0x4>

080012da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr

080012f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012f6:	b480      	push	{r7}
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001308:	f000 f8ae 	bl	8001468 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}

08001310 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001314:	4802      	ldr	r0, [pc, #8]	; (8001320 <SPI1_IRQHandler+0x10>)
 8001316:	f001 fce9 	bl	8002cec <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20009628 	.word	0x20009628

08001324 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001328:	4802      	ldr	r0, [pc, #8]	; (8001334 <DMA2_Stream0_IRQHandler+0x10>)
 800132a:	f000 fb1b 	bl	8001964 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	200096e0 	.word	0x200096e0

08001338 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800133c:	4802      	ldr	r0, [pc, #8]	; (8001348 <DMA2_Stream3_IRQHandler+0x10>)
 800133e:	f000 fb11 	bl	8001964 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20009680 	.word	0x20009680

0800134c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <SystemInit+0x20>)
 8001352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001356:	4a05      	ldr	r2, [pc, #20]	; (800136c <SystemInit+0x20>)
 8001358:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800135c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001370:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001374:	480d      	ldr	r0, [pc, #52]	; (80013ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001376:	490e      	ldr	r1, [pc, #56]	; (80013b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001378:	4a0e      	ldr	r2, [pc, #56]	; (80013b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800137a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800137c:	e002      	b.n	8001384 <LoopCopyDataInit>

0800137e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800137e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001380:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001382:	3304      	adds	r3, #4

08001384 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001384:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001386:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001388:	d3f9      	bcc.n	800137e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800138a:	4a0b      	ldr	r2, [pc, #44]	; (80013b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800138c:	4c0b      	ldr	r4, [pc, #44]	; (80013bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800138e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001390:	e001      	b.n	8001396 <LoopFillZerobss>

08001392 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001392:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001394:	3204      	adds	r2, #4

08001396 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001396:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001398:	d3fb      	bcc.n	8001392 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800139a:	f7ff ffd7 	bl	800134c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800139e:	f001 ff31 	bl	8003204 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013a2:	f7ff fdd3 	bl	8000f4c <main>
  bx  lr    
 80013a6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80013a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013b0:	2000960c 	.word	0x2000960c
  ldr r2, =_sidata
 80013b4:	0800329c 	.word	0x0800329c
  ldr r2, =_sbss
 80013b8:	2000960c 	.word	0x2000960c
  ldr r4, =_ebss
 80013bc:	20009744 	.word	0x20009744

080013c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013c0:	e7fe      	b.n	80013c0 <ADC_IRQHandler>
	...

080013c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013c8:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <HAL_Init+0x40>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a0d      	ldr	r2, [pc, #52]	; (8001404 <HAL_Init+0x40>)
 80013ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013d4:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <HAL_Init+0x40>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a0a      	ldr	r2, [pc, #40]	; (8001404 <HAL_Init+0x40>)
 80013da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013e0:	4b08      	ldr	r3, [pc, #32]	; (8001404 <HAL_Init+0x40>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a07      	ldr	r2, [pc, #28]	; (8001404 <HAL_Init+0x40>)
 80013e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ec:	2003      	movs	r0, #3
 80013ee:	f000 f94f 	bl	8001690 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013f2:	200f      	movs	r0, #15
 80013f4:	f000 f808 	bl	8001408 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013f8:	f7ff ff38 	bl	800126c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40023c00 	.word	0x40023c00

08001408 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001410:	4b12      	ldr	r3, [pc, #72]	; (800145c <HAL_InitTick+0x54>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	4b12      	ldr	r3, [pc, #72]	; (8001460 <HAL_InitTick+0x58>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	4619      	mov	r1, r3
 800141a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800141e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001422:	fbb2 f3f3 	udiv	r3, r2, r3
 8001426:	4618      	mov	r0, r3
 8001428:	f000 f967 	bl	80016fa <HAL_SYSTICK_Config>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e00e      	b.n	8001454 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2b0f      	cmp	r3, #15
 800143a:	d80a      	bhi.n	8001452 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800143c:	2200      	movs	r2, #0
 800143e:	6879      	ldr	r1, [r7, #4]
 8001440:	f04f 30ff 	mov.w	r0, #4294967295
 8001444:	f000 f92f 	bl	80016a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001448:	4a06      	ldr	r2, [pc, #24]	; (8001464 <HAL_InitTick+0x5c>)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800144e:	2300      	movs	r3, #0
 8001450:	e000      	b.n	8001454 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
}
 8001454:	4618      	mov	r0, r3
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20009600 	.word	0x20009600
 8001460:	20009608 	.word	0x20009608
 8001464:	20009604 	.word	0x20009604

08001468 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800146c:	4b06      	ldr	r3, [pc, #24]	; (8001488 <HAL_IncTick+0x20>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	461a      	mov	r2, r3
 8001472:	4b06      	ldr	r3, [pc, #24]	; (800148c <HAL_IncTick+0x24>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4413      	add	r3, r2
 8001478:	4a04      	ldr	r2, [pc, #16]	; (800148c <HAL_IncTick+0x24>)
 800147a:	6013      	str	r3, [r2, #0]
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	20009608 	.word	0x20009608
 800148c:	20009740 	.word	0x20009740

08001490 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  return uwTick;
 8001494:	4b03      	ldr	r3, [pc, #12]	; (80014a4 <HAL_GetTick+0x14>)
 8001496:	681b      	ldr	r3, [r3, #0]
}
 8001498:	4618      	mov	r0, r3
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	20009740 	.word	0x20009740

080014a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014b0:	f7ff ffee 	bl	8001490 <HAL_GetTick>
 80014b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014c0:	d005      	beq.n	80014ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014c2:	4b0a      	ldr	r3, [pc, #40]	; (80014ec <HAL_Delay+0x44>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	461a      	mov	r2, r3
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	4413      	add	r3, r2
 80014cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014ce:	bf00      	nop
 80014d0:	f7ff ffde 	bl	8001490 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	68fa      	ldr	r2, [r7, #12]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d8f7      	bhi.n	80014d0 <HAL_Delay+0x28>
  {
  }
}
 80014e0:	bf00      	nop
 80014e2:	bf00      	nop
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20009608 	.word	0x20009608

080014f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <__NVIC_SetPriorityGrouping+0x44>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001506:	68ba      	ldr	r2, [r7, #8]
 8001508:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800150c:	4013      	ands	r3, r2
 800150e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001518:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800151c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001520:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001522:	4a04      	ldr	r2, [pc, #16]	; (8001534 <__NVIC_SetPriorityGrouping+0x44>)
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	60d3      	str	r3, [r2, #12]
}
 8001528:	bf00      	nop
 800152a:	3714      	adds	r7, #20
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800153c:	4b04      	ldr	r3, [pc, #16]	; (8001550 <__NVIC_GetPriorityGrouping+0x18>)
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	0a1b      	lsrs	r3, r3, #8
 8001542:	f003 0307 	and.w	r3, r3, #7
}
 8001546:	4618      	mov	r0, r3
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	e000ed00 	.word	0xe000ed00

08001554 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800155e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001562:	2b00      	cmp	r3, #0
 8001564:	db0b      	blt.n	800157e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001566:	79fb      	ldrb	r3, [r7, #7]
 8001568:	f003 021f 	and.w	r2, r3, #31
 800156c:	4907      	ldr	r1, [pc, #28]	; (800158c <__NVIC_EnableIRQ+0x38>)
 800156e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001572:	095b      	lsrs	r3, r3, #5
 8001574:	2001      	movs	r0, #1
 8001576:	fa00 f202 	lsl.w	r2, r0, r2
 800157a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	e000e100 	.word	0xe000e100

08001590 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	6039      	str	r1, [r7, #0]
 800159a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800159c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	db0a      	blt.n	80015ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	490c      	ldr	r1, [pc, #48]	; (80015dc <__NVIC_SetPriority+0x4c>)
 80015aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ae:	0112      	lsls	r2, r2, #4
 80015b0:	b2d2      	uxtb	r2, r2
 80015b2:	440b      	add	r3, r1
 80015b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015b8:	e00a      	b.n	80015d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	b2da      	uxtb	r2, r3
 80015be:	4908      	ldr	r1, [pc, #32]	; (80015e0 <__NVIC_SetPriority+0x50>)
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	f003 030f 	and.w	r3, r3, #15
 80015c6:	3b04      	subs	r3, #4
 80015c8:	0112      	lsls	r2, r2, #4
 80015ca:	b2d2      	uxtb	r2, r2
 80015cc:	440b      	add	r3, r1
 80015ce:	761a      	strb	r2, [r3, #24]
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	e000e100 	.word	0xe000e100
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b089      	sub	sp, #36	; 0x24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f003 0307 	and.w	r3, r3, #7
 80015f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	f1c3 0307 	rsb	r3, r3, #7
 80015fe:	2b04      	cmp	r3, #4
 8001600:	bf28      	it	cs
 8001602:	2304      	movcs	r3, #4
 8001604:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	3304      	adds	r3, #4
 800160a:	2b06      	cmp	r3, #6
 800160c:	d902      	bls.n	8001614 <NVIC_EncodePriority+0x30>
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	3b03      	subs	r3, #3
 8001612:	e000      	b.n	8001616 <NVIC_EncodePriority+0x32>
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001618:	f04f 32ff 	mov.w	r2, #4294967295
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	43da      	mvns	r2, r3
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	401a      	ands	r2, r3
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800162c:	f04f 31ff 	mov.w	r1, #4294967295
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	fa01 f303 	lsl.w	r3, r1, r3
 8001636:	43d9      	mvns	r1, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800163c:	4313      	orrs	r3, r2
         );
}
 800163e:	4618      	mov	r0, r3
 8001640:	3724      	adds	r7, #36	; 0x24
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
	...

0800164c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	3b01      	subs	r3, #1
 8001658:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800165c:	d301      	bcc.n	8001662 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800165e:	2301      	movs	r3, #1
 8001660:	e00f      	b.n	8001682 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001662:	4a0a      	ldr	r2, [pc, #40]	; (800168c <SysTick_Config+0x40>)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3b01      	subs	r3, #1
 8001668:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800166a:	210f      	movs	r1, #15
 800166c:	f04f 30ff 	mov.w	r0, #4294967295
 8001670:	f7ff ff8e 	bl	8001590 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001674:	4b05      	ldr	r3, [pc, #20]	; (800168c <SysTick_Config+0x40>)
 8001676:	2200      	movs	r2, #0
 8001678:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800167a:	4b04      	ldr	r3, [pc, #16]	; (800168c <SysTick_Config+0x40>)
 800167c:	2207      	movs	r2, #7
 800167e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	e000e010 	.word	0xe000e010

08001690 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff ff29 	bl	80014f0 <__NVIC_SetPriorityGrouping>
}
 800169e:	bf00      	nop
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b086      	sub	sp, #24
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	4603      	mov	r3, r0
 80016ae:	60b9      	str	r1, [r7, #8]
 80016b0:	607a      	str	r2, [r7, #4]
 80016b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016b4:	2300      	movs	r3, #0
 80016b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016b8:	f7ff ff3e 	bl	8001538 <__NVIC_GetPriorityGrouping>
 80016bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	68b9      	ldr	r1, [r7, #8]
 80016c2:	6978      	ldr	r0, [r7, #20]
 80016c4:	f7ff ff8e 	bl	80015e4 <NVIC_EncodePriority>
 80016c8:	4602      	mov	r2, r0
 80016ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ce:	4611      	mov	r1, r2
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff ff5d 	bl	8001590 <__NVIC_SetPriority>
}
 80016d6:	bf00      	nop
 80016d8:	3718      	adds	r7, #24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	4603      	mov	r3, r0
 80016e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff ff31 	bl	8001554 <__NVIC_EnableIRQ>
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b082      	sub	sp, #8
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f7ff ffa2 	bl	800164c <SysTick_Config>
 8001708:	4603      	mov	r3, r0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
	...

08001714 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800171c:	2300      	movs	r3, #0
 800171e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001720:	f7ff feb6 	bl	8001490 <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d101      	bne.n	8001730 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e099      	b.n	8001864 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2202      	movs	r2, #2
 8001734:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f022 0201 	bic.w	r2, r2, #1
 800174e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001750:	e00f      	b.n	8001772 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001752:	f7ff fe9d 	bl	8001490 <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b05      	cmp	r3, #5
 800175e:	d908      	bls.n	8001772 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2220      	movs	r2, #32
 8001764:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2203      	movs	r2, #3
 800176a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e078      	b.n	8001864 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	2b00      	cmp	r3, #0
 800177e:	d1e8      	bne.n	8001752 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001788:	697a      	ldr	r2, [r7, #20]
 800178a:	4b38      	ldr	r3, [pc, #224]	; (800186c <HAL_DMA_Init+0x158>)
 800178c:	4013      	ands	r3, r2
 800178e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685a      	ldr	r2, [r3, #4]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800179e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	691b      	ldr	r3, [r3, #16]
 80017a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a1b      	ldr	r3, [r3, #32]
 80017bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017be:	697a      	ldr	r2, [r7, #20]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c8:	2b04      	cmp	r3, #4
 80017ca:	d107      	bne.n	80017dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d4:	4313      	orrs	r3, r2
 80017d6:	697a      	ldr	r2, [r7, #20]
 80017d8:	4313      	orrs	r3, r2
 80017da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	697a      	ldr	r2, [r7, #20]
 80017e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	695b      	ldr	r3, [r3, #20]
 80017ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	f023 0307 	bic.w	r3, r3, #7
 80017f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f8:	697a      	ldr	r2, [r7, #20]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001802:	2b04      	cmp	r3, #4
 8001804:	d117      	bne.n	8001836 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180a:	697a      	ldr	r2, [r7, #20]
 800180c:	4313      	orrs	r3, r2
 800180e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001814:	2b00      	cmp	r3, #0
 8001816:	d00e      	beq.n	8001836 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f000 fa91 	bl	8001d40 <DMA_CheckFifoParam>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d008      	beq.n	8001836 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2240      	movs	r2, #64	; 0x40
 8001828:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2201      	movs	r2, #1
 800182e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001832:	2301      	movs	r3, #1
 8001834:	e016      	b.n	8001864 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	697a      	ldr	r2, [r7, #20]
 800183c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f000 fa48 	bl	8001cd4 <DMA_CalcBaseAndBitshift>
 8001844:	4603      	mov	r3, r0
 8001846:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800184c:	223f      	movs	r2, #63	; 0x3f
 800184e:	409a      	lsls	r2, r3
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2201      	movs	r2, #1
 800185e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001862:	2300      	movs	r3, #0
}
 8001864:	4618      	mov	r0, r3
 8001866:	3718      	adds	r7, #24
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	f010803f 	.word	0xf010803f

08001870 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
 800187c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800187e:	2300      	movs	r3, #0
 8001880:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001886:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800188e:	2b01      	cmp	r3, #1
 8001890:	d101      	bne.n	8001896 <HAL_DMA_Start_IT+0x26>
 8001892:	2302      	movs	r3, #2
 8001894:	e040      	b.n	8001918 <HAL_DMA_Start_IT+0xa8>
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2201      	movs	r2, #1
 800189a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d12f      	bne.n	800190a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2202      	movs	r2, #2
 80018ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2200      	movs	r2, #0
 80018b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	68b9      	ldr	r1, [r7, #8]
 80018be:	68f8      	ldr	r0, [r7, #12]
 80018c0:	f000 f9da 	bl	8001c78 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018c8:	223f      	movs	r2, #63	; 0x3f
 80018ca:	409a      	lsls	r2, r3
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f042 0216 	orr.w	r2, r2, #22
 80018de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d007      	beq.n	80018f8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f042 0208 	orr.w	r2, r2, #8
 80018f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f042 0201 	orr.w	r2, r2, #1
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	e005      	b.n	8001916 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2200      	movs	r2, #0
 800190e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001912:	2302      	movs	r3, #2
 8001914:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001916:	7dfb      	ldrb	r3, [r7, #23]
}
 8001918:	4618      	mov	r0, r3
 800191a:	3718      	adds	r7, #24
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800192e:	b2db      	uxtb	r3, r3
 8001930:	2b02      	cmp	r3, #2
 8001932:	d004      	beq.n	800193e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2280      	movs	r2, #128	; 0x80
 8001938:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e00c      	b.n	8001958 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2205      	movs	r2, #5
 8001942:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f022 0201 	bic.w	r2, r2, #1
 8001954:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001956:	2300      	movs	r3, #0
}
 8001958:	4618      	mov	r0, r3
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800196c:	2300      	movs	r3, #0
 800196e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001970:	4b8e      	ldr	r3, [pc, #568]	; (8001bac <HAL_DMA_IRQHandler+0x248>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a8e      	ldr	r2, [pc, #568]	; (8001bb0 <HAL_DMA_IRQHandler+0x24c>)
 8001976:	fba2 2303 	umull	r2, r3, r2, r3
 800197a:	0a9b      	lsrs	r3, r3, #10
 800197c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001982:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800198e:	2208      	movs	r2, #8
 8001990:	409a      	lsls	r2, r3
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	4013      	ands	r3, r2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d01a      	beq.n	80019d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0304 	and.w	r3, r3, #4
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d013      	beq.n	80019d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f022 0204 	bic.w	r2, r2, #4
 80019b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019bc:	2208      	movs	r2, #8
 80019be:	409a      	lsls	r2, r3
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019c8:	f043 0201 	orr.w	r2, r3, #1
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d4:	2201      	movs	r2, #1
 80019d6:	409a      	lsls	r2, r3
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	4013      	ands	r3, r2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d012      	beq.n	8001a06 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d00b      	beq.n	8001a06 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f2:	2201      	movs	r2, #1
 80019f4:	409a      	lsls	r2, r3
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019fe:	f043 0202 	orr.w	r2, r3, #2
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a0a:	2204      	movs	r2, #4
 8001a0c:	409a      	lsls	r2, r3
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	4013      	ands	r3, r2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d012      	beq.n	8001a3c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d00b      	beq.n	8001a3c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a28:	2204      	movs	r2, #4
 8001a2a:	409a      	lsls	r2, r3
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a34:	f043 0204 	orr.w	r2, r3, #4
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a40:	2210      	movs	r2, #16
 8001a42:	409a      	lsls	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	4013      	ands	r3, r2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d043      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0308 	and.w	r3, r3, #8
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d03c      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a5e:	2210      	movs	r2, #16
 8001a60:	409a      	lsls	r2, r3
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d018      	beq.n	8001aa6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d108      	bne.n	8001a94 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d024      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	4798      	blx	r3
 8001a92:	e01f      	b.n	8001ad4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d01b      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	4798      	blx	r3
 8001aa4:	e016      	b.n	8001ad4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d107      	bne.n	8001ac4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f022 0208 	bic.w	r2, r2, #8
 8001ac2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d003      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ad8:	2220      	movs	r2, #32
 8001ada:	409a      	lsls	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f000 808f 	beq.w	8001c04 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0310 	and.w	r3, r3, #16
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	f000 8087 	beq.w	8001c04 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001afa:	2220      	movs	r2, #32
 8001afc:	409a      	lsls	r2, r3
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b05      	cmp	r3, #5
 8001b0c:	d136      	bne.n	8001b7c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f022 0216 	bic.w	r2, r2, #22
 8001b1c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	695a      	ldr	r2, [r3, #20]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b2c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d103      	bne.n	8001b3e <HAL_DMA_IRQHandler+0x1da>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d007      	beq.n	8001b4e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f022 0208 	bic.w	r2, r2, #8
 8001b4c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b52:	223f      	movs	r2, #63	; 0x3f
 8001b54:	409a      	lsls	r2, r3
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d07e      	beq.n	8001c70 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	4798      	blx	r3
        }
        return;
 8001b7a:	e079      	b.n	8001c70 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d01d      	beq.n	8001bc6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d10d      	bne.n	8001bb4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d031      	beq.n	8001c04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	4798      	blx	r3
 8001ba8:	e02c      	b.n	8001c04 <HAL_DMA_IRQHandler+0x2a0>
 8001baa:	bf00      	nop
 8001bac:	20009600 	.word	0x20009600
 8001bb0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d023      	beq.n	8001c04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	4798      	blx	r3
 8001bc4:	e01e      	b.n	8001c04 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d10f      	bne.n	8001bf4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f022 0210 	bic.w	r2, r2, #16
 8001be2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d003      	beq.n	8001c04 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d032      	beq.n	8001c72 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d022      	beq.n	8001c5e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2205      	movs	r2, #5
 8001c1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f022 0201 	bic.w	r2, r2, #1
 8001c2e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	3301      	adds	r3, #1
 8001c34:	60bb      	str	r3, [r7, #8]
 8001c36:	697a      	ldr	r2, [r7, #20]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d307      	bcc.n	8001c4c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1f2      	bne.n	8001c30 <HAL_DMA_IRQHandler+0x2cc>
 8001c4a:	e000      	b.n	8001c4e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001c4c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2201      	movs	r2, #1
 8001c52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d005      	beq.n	8001c72 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	4798      	blx	r3
 8001c6e:	e000      	b.n	8001c72 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001c70:	bf00      	nop
    }
  }
}
 8001c72:	3718      	adds	r7, #24
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
 8001c84:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c94:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	2b40      	cmp	r3, #64	; 0x40
 8001ca4:	d108      	bne.n	8001cb8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	68ba      	ldr	r2, [r7, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001cb6:	e007      	b.n	8001cc8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	68ba      	ldr	r2, [r7, #8]
 8001cbe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	60da      	str	r2, [r3, #12]
}
 8001cc8:	bf00      	nop
 8001cca:	3714      	adds	r7, #20
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	3b10      	subs	r3, #16
 8001ce4:	4a14      	ldr	r2, [pc, #80]	; (8001d38 <DMA_CalcBaseAndBitshift+0x64>)
 8001ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cea:	091b      	lsrs	r3, r3, #4
 8001cec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001cee:	4a13      	ldr	r2, [pc, #76]	; (8001d3c <DMA_CalcBaseAndBitshift+0x68>)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2b03      	cmp	r3, #3
 8001d00:	d909      	bls.n	8001d16 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d0a:	f023 0303 	bic.w	r3, r3, #3
 8001d0e:	1d1a      	adds	r2, r3, #4
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	659a      	str	r2, [r3, #88]	; 0x58
 8001d14:	e007      	b.n	8001d26 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d1e:	f023 0303 	bic.w	r3, r3, #3
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3714      	adds	r7, #20
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	aaaaaaab 	.word	0xaaaaaaab
 8001d3c:	08003284 	.word	0x08003284

08001d40 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d50:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d11f      	bne.n	8001d9a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	2b03      	cmp	r3, #3
 8001d5e:	d856      	bhi.n	8001e0e <DMA_CheckFifoParam+0xce>
 8001d60:	a201      	add	r2, pc, #4	; (adr r2, 8001d68 <DMA_CheckFifoParam+0x28>)
 8001d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d66:	bf00      	nop
 8001d68:	08001d79 	.word	0x08001d79
 8001d6c:	08001d8b 	.word	0x08001d8b
 8001d70:	08001d79 	.word	0x08001d79
 8001d74:	08001e0f 	.word	0x08001e0f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d046      	beq.n	8001e12 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d88:	e043      	b.n	8001e12 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d92:	d140      	bne.n	8001e16 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d98:	e03d      	b.n	8001e16 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	699b      	ldr	r3, [r3, #24]
 8001d9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001da2:	d121      	bne.n	8001de8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	2b03      	cmp	r3, #3
 8001da8:	d837      	bhi.n	8001e1a <DMA_CheckFifoParam+0xda>
 8001daa:	a201      	add	r2, pc, #4	; (adr r2, 8001db0 <DMA_CheckFifoParam+0x70>)
 8001dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001db0:	08001dc1 	.word	0x08001dc1
 8001db4:	08001dc7 	.word	0x08001dc7
 8001db8:	08001dc1 	.word	0x08001dc1
 8001dbc:	08001dd9 	.word	0x08001dd9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	73fb      	strb	r3, [r7, #15]
      break;
 8001dc4:	e030      	b.n	8001e28 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d025      	beq.n	8001e1e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001dd6:	e022      	b.n	8001e1e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ddc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001de0:	d11f      	bne.n	8001e22 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001de6:	e01c      	b.n	8001e22 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d903      	bls.n	8001df6 <DMA_CheckFifoParam+0xb6>
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	2b03      	cmp	r3, #3
 8001df2:	d003      	beq.n	8001dfc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001df4:	e018      	b.n	8001e28 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	73fb      	strb	r3, [r7, #15]
      break;
 8001dfa:	e015      	b.n	8001e28 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d00e      	beq.n	8001e26 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	73fb      	strb	r3, [r7, #15]
      break;
 8001e0c:	e00b      	b.n	8001e26 <DMA_CheckFifoParam+0xe6>
      break;
 8001e0e:	bf00      	nop
 8001e10:	e00a      	b.n	8001e28 <DMA_CheckFifoParam+0xe8>
      break;
 8001e12:	bf00      	nop
 8001e14:	e008      	b.n	8001e28 <DMA_CheckFifoParam+0xe8>
      break;
 8001e16:	bf00      	nop
 8001e18:	e006      	b.n	8001e28 <DMA_CheckFifoParam+0xe8>
      break;
 8001e1a:	bf00      	nop
 8001e1c:	e004      	b.n	8001e28 <DMA_CheckFifoParam+0xe8>
      break;
 8001e1e:	bf00      	nop
 8001e20:	e002      	b.n	8001e28 <DMA_CheckFifoParam+0xe8>
      break;   
 8001e22:	bf00      	nop
 8001e24:	e000      	b.n	8001e28 <DMA_CheckFifoParam+0xe8>
      break;
 8001e26:	bf00      	nop
    }
  } 
  
  return status; 
 8001e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3714      	adds	r7, #20
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop

08001e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b089      	sub	sp, #36	; 0x24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e42:	2300      	movs	r3, #0
 8001e44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e46:	2300      	movs	r3, #0
 8001e48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61fb      	str	r3, [r7, #28]
 8001e52:	e16b      	b.n	800212c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e54:	2201      	movs	r2, #1
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	4013      	ands	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	f040 815a 	bne.w	8002126 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f003 0303 	and.w	r3, r3, #3
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d005      	beq.n	8001e8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d130      	bne.n	8001eec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	2203      	movs	r2, #3
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	68da      	ldr	r2, [r3, #12]
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	091b      	lsrs	r3, r3, #4
 8001ed6:	f003 0201 	and.w	r2, r3, #1
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f003 0303 	and.w	r3, r3, #3
 8001ef4:	2b03      	cmp	r3, #3
 8001ef6:	d017      	beq.n	8001f28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	2203      	movs	r2, #3
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f003 0303 	and.w	r3, r3, #3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d123      	bne.n	8001f7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	08da      	lsrs	r2, r3, #3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3208      	adds	r2, #8
 8001f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	f003 0307 	and.w	r3, r3, #7
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	220f      	movs	r2, #15
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	43db      	mvns	r3, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4013      	ands	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	691a      	ldr	r2, [r3, #16]
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	08da      	lsrs	r2, r3, #3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	3208      	adds	r2, #8
 8001f76:	69b9      	ldr	r1, [r7, #24]
 8001f78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	2203      	movs	r2, #3
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	4013      	ands	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 0203 	and.w	r2, r3, #3
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f000 80b4 	beq.w	8002126 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	4b60      	ldr	r3, [pc, #384]	; (8002144 <HAL_GPIO_Init+0x30c>)
 8001fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc6:	4a5f      	ldr	r2, [pc, #380]	; (8002144 <HAL_GPIO_Init+0x30c>)
 8001fc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8001fce:	4b5d      	ldr	r3, [pc, #372]	; (8002144 <HAL_GPIO_Init+0x30c>)
 8001fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fda:	4a5b      	ldr	r2, [pc, #364]	; (8002148 <HAL_GPIO_Init+0x310>)
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	089b      	lsrs	r3, r3, #2
 8001fe0:	3302      	adds	r3, #2
 8001fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	f003 0303 	and.w	r3, r3, #3
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	220f      	movs	r2, #15
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a52      	ldr	r2, [pc, #328]	; (800214c <HAL_GPIO_Init+0x314>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d02b      	beq.n	800205e <HAL_GPIO_Init+0x226>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a51      	ldr	r2, [pc, #324]	; (8002150 <HAL_GPIO_Init+0x318>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d025      	beq.n	800205a <HAL_GPIO_Init+0x222>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a50      	ldr	r2, [pc, #320]	; (8002154 <HAL_GPIO_Init+0x31c>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d01f      	beq.n	8002056 <HAL_GPIO_Init+0x21e>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a4f      	ldr	r2, [pc, #316]	; (8002158 <HAL_GPIO_Init+0x320>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d019      	beq.n	8002052 <HAL_GPIO_Init+0x21a>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a4e      	ldr	r2, [pc, #312]	; (800215c <HAL_GPIO_Init+0x324>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d013      	beq.n	800204e <HAL_GPIO_Init+0x216>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a4d      	ldr	r2, [pc, #308]	; (8002160 <HAL_GPIO_Init+0x328>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d00d      	beq.n	800204a <HAL_GPIO_Init+0x212>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a4c      	ldr	r2, [pc, #304]	; (8002164 <HAL_GPIO_Init+0x32c>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d007      	beq.n	8002046 <HAL_GPIO_Init+0x20e>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a4b      	ldr	r2, [pc, #300]	; (8002168 <HAL_GPIO_Init+0x330>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d101      	bne.n	8002042 <HAL_GPIO_Init+0x20a>
 800203e:	2307      	movs	r3, #7
 8002040:	e00e      	b.n	8002060 <HAL_GPIO_Init+0x228>
 8002042:	2308      	movs	r3, #8
 8002044:	e00c      	b.n	8002060 <HAL_GPIO_Init+0x228>
 8002046:	2306      	movs	r3, #6
 8002048:	e00a      	b.n	8002060 <HAL_GPIO_Init+0x228>
 800204a:	2305      	movs	r3, #5
 800204c:	e008      	b.n	8002060 <HAL_GPIO_Init+0x228>
 800204e:	2304      	movs	r3, #4
 8002050:	e006      	b.n	8002060 <HAL_GPIO_Init+0x228>
 8002052:	2303      	movs	r3, #3
 8002054:	e004      	b.n	8002060 <HAL_GPIO_Init+0x228>
 8002056:	2302      	movs	r3, #2
 8002058:	e002      	b.n	8002060 <HAL_GPIO_Init+0x228>
 800205a:	2301      	movs	r3, #1
 800205c:	e000      	b.n	8002060 <HAL_GPIO_Init+0x228>
 800205e:	2300      	movs	r3, #0
 8002060:	69fa      	ldr	r2, [r7, #28]
 8002062:	f002 0203 	and.w	r2, r2, #3
 8002066:	0092      	lsls	r2, r2, #2
 8002068:	4093      	lsls	r3, r2
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	4313      	orrs	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002070:	4935      	ldr	r1, [pc, #212]	; (8002148 <HAL_GPIO_Init+0x310>)
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	089b      	lsrs	r3, r3, #2
 8002076:	3302      	adds	r3, #2
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800207e:	4b3b      	ldr	r3, [pc, #236]	; (800216c <HAL_GPIO_Init+0x334>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	43db      	mvns	r3, r3
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	4013      	ands	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	4313      	orrs	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020a2:	4a32      	ldr	r2, [pc, #200]	; (800216c <HAL_GPIO_Init+0x334>)
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020a8:	4b30      	ldr	r3, [pc, #192]	; (800216c <HAL_GPIO_Init+0x334>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	43db      	mvns	r3, r3
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	4013      	ands	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d003      	beq.n	80020cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020cc:	4a27      	ldr	r2, [pc, #156]	; (800216c <HAL_GPIO_Init+0x334>)
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020d2:	4b26      	ldr	r3, [pc, #152]	; (800216c <HAL_GPIO_Init+0x334>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	43db      	mvns	r3, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4013      	ands	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020f6:	4a1d      	ldr	r2, [pc, #116]	; (800216c <HAL_GPIO_Init+0x334>)
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020fc:	4b1b      	ldr	r3, [pc, #108]	; (800216c <HAL_GPIO_Init+0x334>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	43db      	mvns	r3, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4013      	ands	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d003      	beq.n	8002120 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	4313      	orrs	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002120:	4a12      	ldr	r2, [pc, #72]	; (800216c <HAL_GPIO_Init+0x334>)
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	3301      	adds	r3, #1
 800212a:	61fb      	str	r3, [r7, #28]
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	2b0f      	cmp	r3, #15
 8002130:	f67f ae90 	bls.w	8001e54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002134:	bf00      	nop
 8002136:	bf00      	nop
 8002138:	3724      	adds	r7, #36	; 0x24
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	40023800 	.word	0x40023800
 8002148:	40013800 	.word	0x40013800
 800214c:	40020000 	.word	0x40020000
 8002150:	40020400 	.word	0x40020400
 8002154:	40020800 	.word	0x40020800
 8002158:	40020c00 	.word	0x40020c00
 800215c:	40021000 	.word	0x40021000
 8002160:	40021400 	.word	0x40021400
 8002164:	40021800 	.word	0x40021800
 8002168:	40021c00 	.word	0x40021c00
 800216c:	40013c00 	.word	0x40013c00

08002170 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	460b      	mov	r3, r1
 800217a:	807b      	strh	r3, [r7, #2]
 800217c:	4613      	mov	r3, r2
 800217e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002180:	787b      	ldrb	r3, [r7, #1]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d003      	beq.n	800218e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002186:	887a      	ldrh	r2, [r7, #2]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800218c:	e003      	b.n	8002196 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800218e:	887b      	ldrh	r3, [r7, #2]
 8002190:	041a      	lsls	r2, r3, #16
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	619a      	str	r2, [r3, #24]
}
 8002196:	bf00      	nop
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
	...

080021a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e267      	b.n	8002686 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d075      	beq.n	80022ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021c2:	4b88      	ldr	r3, [pc, #544]	; (80023e4 <HAL_RCC_OscConfig+0x240>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f003 030c 	and.w	r3, r3, #12
 80021ca:	2b04      	cmp	r3, #4
 80021cc:	d00c      	beq.n	80021e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021ce:	4b85      	ldr	r3, [pc, #532]	; (80023e4 <HAL_RCC_OscConfig+0x240>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021d6:	2b08      	cmp	r3, #8
 80021d8:	d112      	bne.n	8002200 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021da:	4b82      	ldr	r3, [pc, #520]	; (80023e4 <HAL_RCC_OscConfig+0x240>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021e6:	d10b      	bne.n	8002200 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021e8:	4b7e      	ldr	r3, [pc, #504]	; (80023e4 <HAL_RCC_OscConfig+0x240>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d05b      	beq.n	80022ac <HAL_RCC_OscConfig+0x108>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d157      	bne.n	80022ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e242      	b.n	8002686 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002208:	d106      	bne.n	8002218 <HAL_RCC_OscConfig+0x74>
 800220a:	4b76      	ldr	r3, [pc, #472]	; (80023e4 <HAL_RCC_OscConfig+0x240>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a75      	ldr	r2, [pc, #468]	; (80023e4 <HAL_RCC_OscConfig+0x240>)
 8002210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002214:	6013      	str	r3, [r2, #0]
 8002216:	e01d      	b.n	8002254 <HAL_RCC_OscConfig+0xb0>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002220:	d10c      	bne.n	800223c <HAL_RCC_OscConfig+0x98>
 8002222:	4b70      	ldr	r3, [pc, #448]	; (80023e4 <HAL_RCC_OscConfig+0x240>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a6f      	ldr	r2, [pc, #444]	; (80023e4 <HAL_RCC_OscConfig+0x240>)
 8002228:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800222c:	6013      	str	r3, [r2, #0]
 800222e:	4b6d      	ldr	r3, [pc, #436]	; (80023e4 <HAL_RCC_OscConfig+0x240>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a6c      	ldr	r2, [pc, #432]	; (80023e4 <HAL_RCC_OscConfig+0x240>)
 8002234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002238:	6013      	str	r3, [r2, #0]
 800223a:	e00b      	b.n	8002254 <HAL_RCC_OscConfig+0xb0>
 800223c:	4b69      	ldr	r3, [pc, #420]	; (80023e4 <HAL_RCC_OscConfig+0x240>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a68      	ldr	r2, [pc, #416]	; (80023e4 <HAL_RCC_OscConfig+0x240>)
 8002242:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002246:	6013      	str	r3, [r2, #0]
 8002248:	4b66      	ldr	r3, [pc, #408]	; (80023e4 <HAL_RCC_OscConfig+0x240>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a65      	ldr	r2, [pc, #404]	; (80023e4 <HAL_RCC_OscConfig+0x240>)
 800224e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002252:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d013      	beq.n	8002284 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225c:	f7ff f918 	bl	8001490 <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002264:	f7ff f914 	bl	8001490 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b64      	cmp	r3, #100	; 0x64
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e207      	b.n	8002686 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002276:	4b5b      	ldr	r3, [pc, #364]	; (80023e4 <HAL_RCC_OscConfig+0x240>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d0f0      	beq.n	8002264 <HAL_RCC_OscConfig+0xc0>
 8002282:	e014      	b.n	80022ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002284:	f7ff f904 	bl	8001490 <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800228c:	f7ff f900 	bl	8001490 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b64      	cmp	r3, #100	; 0x64
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e1f3      	b.n	8002686 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800229e:	4b51      	ldr	r3, [pc, #324]	; (80023e4 <HAL_RCC_OscConfig+0x240>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1f0      	bne.n	800228c <HAL_RCC_OscConfig+0xe8>
 80022aa:	e000      	b.n	80022ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d063      	beq.n	8002382 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022ba:	4b4a      	ldr	r3, [pc, #296]	; (80023e4 <HAL_RCC_OscConfig+0x240>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f003 030c 	and.w	r3, r3, #12
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00b      	beq.n	80022de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022c6:	4b47      	ldr	r3, [pc, #284]	; (80023e4 <HAL_RCC_OscConfig+0x240>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022ce:	2b08      	cmp	r3, #8
 80022d0:	d11c      	bne.n	800230c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022d2:	4b44      	ldr	r3, [pc, #272]	; (80023e4 <HAL_RCC_OscConfig+0x240>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d116      	bne.n	800230c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022de:	4b41      	ldr	r3, [pc, #260]	; (80023e4 <HAL_RCC_OscConfig+0x240>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d005      	beq.n	80022f6 <HAL_RCC_OscConfig+0x152>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d001      	beq.n	80022f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e1c7      	b.n	8002686 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022f6:	4b3b      	ldr	r3, [pc, #236]	; (80023e4 <HAL_RCC_OscConfig+0x240>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	4937      	ldr	r1, [pc, #220]	; (80023e4 <HAL_RCC_OscConfig+0x240>)
 8002306:	4313      	orrs	r3, r2
 8002308:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800230a:	e03a      	b.n	8002382 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d020      	beq.n	8002356 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002314:	4b34      	ldr	r3, [pc, #208]	; (80023e8 <HAL_RCC_OscConfig+0x244>)
 8002316:	2201      	movs	r2, #1
 8002318:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800231a:	f7ff f8b9 	bl	8001490 <HAL_GetTick>
 800231e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002320:	e008      	b.n	8002334 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002322:	f7ff f8b5 	bl	8001490 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b02      	cmp	r3, #2
 800232e:	d901      	bls.n	8002334 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e1a8      	b.n	8002686 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002334:	4b2b      	ldr	r3, [pc, #172]	; (80023e4 <HAL_RCC_OscConfig+0x240>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d0f0      	beq.n	8002322 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002340:	4b28      	ldr	r3, [pc, #160]	; (80023e4 <HAL_RCC_OscConfig+0x240>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	4925      	ldr	r1, [pc, #148]	; (80023e4 <HAL_RCC_OscConfig+0x240>)
 8002350:	4313      	orrs	r3, r2
 8002352:	600b      	str	r3, [r1, #0]
 8002354:	e015      	b.n	8002382 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002356:	4b24      	ldr	r3, [pc, #144]	; (80023e8 <HAL_RCC_OscConfig+0x244>)
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800235c:	f7ff f898 	bl	8001490 <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002364:	f7ff f894 	bl	8001490 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e187      	b.n	8002686 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002376:	4b1b      	ldr	r3, [pc, #108]	; (80023e4 <HAL_RCC_OscConfig+0x240>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1f0      	bne.n	8002364 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0308 	and.w	r3, r3, #8
 800238a:	2b00      	cmp	r3, #0
 800238c:	d036      	beq.n	80023fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	695b      	ldr	r3, [r3, #20]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d016      	beq.n	80023c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002396:	4b15      	ldr	r3, [pc, #84]	; (80023ec <HAL_RCC_OscConfig+0x248>)
 8002398:	2201      	movs	r2, #1
 800239a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800239c:	f7ff f878 	bl	8001490 <HAL_GetTick>
 80023a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023a4:	f7ff f874 	bl	8001490 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e167      	b.n	8002686 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023b6:	4b0b      	ldr	r3, [pc, #44]	; (80023e4 <HAL_RCC_OscConfig+0x240>)
 80023b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d0f0      	beq.n	80023a4 <HAL_RCC_OscConfig+0x200>
 80023c2:	e01b      	b.n	80023fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023c4:	4b09      	ldr	r3, [pc, #36]	; (80023ec <HAL_RCC_OscConfig+0x248>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ca:	f7ff f861 	bl	8001490 <HAL_GetTick>
 80023ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023d0:	e00e      	b.n	80023f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023d2:	f7ff f85d 	bl	8001490 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d907      	bls.n	80023f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e150      	b.n	8002686 <HAL_RCC_OscConfig+0x4e2>
 80023e4:	40023800 	.word	0x40023800
 80023e8:	42470000 	.word	0x42470000
 80023ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023f0:	4b88      	ldr	r3, [pc, #544]	; (8002614 <HAL_RCC_OscConfig+0x470>)
 80023f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1ea      	bne.n	80023d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0304 	and.w	r3, r3, #4
 8002404:	2b00      	cmp	r3, #0
 8002406:	f000 8097 	beq.w	8002538 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800240a:	2300      	movs	r3, #0
 800240c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800240e:	4b81      	ldr	r3, [pc, #516]	; (8002614 <HAL_RCC_OscConfig+0x470>)
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10f      	bne.n	800243a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800241a:	2300      	movs	r3, #0
 800241c:	60bb      	str	r3, [r7, #8]
 800241e:	4b7d      	ldr	r3, [pc, #500]	; (8002614 <HAL_RCC_OscConfig+0x470>)
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002422:	4a7c      	ldr	r2, [pc, #496]	; (8002614 <HAL_RCC_OscConfig+0x470>)
 8002424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002428:	6413      	str	r3, [r2, #64]	; 0x40
 800242a:	4b7a      	ldr	r3, [pc, #488]	; (8002614 <HAL_RCC_OscConfig+0x470>)
 800242c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002432:	60bb      	str	r3, [r7, #8]
 8002434:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002436:	2301      	movs	r3, #1
 8002438:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800243a:	4b77      	ldr	r3, [pc, #476]	; (8002618 <HAL_RCC_OscConfig+0x474>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002442:	2b00      	cmp	r3, #0
 8002444:	d118      	bne.n	8002478 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002446:	4b74      	ldr	r3, [pc, #464]	; (8002618 <HAL_RCC_OscConfig+0x474>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a73      	ldr	r2, [pc, #460]	; (8002618 <HAL_RCC_OscConfig+0x474>)
 800244c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002450:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002452:	f7ff f81d 	bl	8001490 <HAL_GetTick>
 8002456:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002458:	e008      	b.n	800246c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800245a:	f7ff f819 	bl	8001490 <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b02      	cmp	r3, #2
 8002466:	d901      	bls.n	800246c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e10c      	b.n	8002686 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800246c:	4b6a      	ldr	r3, [pc, #424]	; (8002618 <HAL_RCC_OscConfig+0x474>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002474:	2b00      	cmp	r3, #0
 8002476:	d0f0      	beq.n	800245a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d106      	bne.n	800248e <HAL_RCC_OscConfig+0x2ea>
 8002480:	4b64      	ldr	r3, [pc, #400]	; (8002614 <HAL_RCC_OscConfig+0x470>)
 8002482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002484:	4a63      	ldr	r2, [pc, #396]	; (8002614 <HAL_RCC_OscConfig+0x470>)
 8002486:	f043 0301 	orr.w	r3, r3, #1
 800248a:	6713      	str	r3, [r2, #112]	; 0x70
 800248c:	e01c      	b.n	80024c8 <HAL_RCC_OscConfig+0x324>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	2b05      	cmp	r3, #5
 8002494:	d10c      	bne.n	80024b0 <HAL_RCC_OscConfig+0x30c>
 8002496:	4b5f      	ldr	r3, [pc, #380]	; (8002614 <HAL_RCC_OscConfig+0x470>)
 8002498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800249a:	4a5e      	ldr	r2, [pc, #376]	; (8002614 <HAL_RCC_OscConfig+0x470>)
 800249c:	f043 0304 	orr.w	r3, r3, #4
 80024a0:	6713      	str	r3, [r2, #112]	; 0x70
 80024a2:	4b5c      	ldr	r3, [pc, #368]	; (8002614 <HAL_RCC_OscConfig+0x470>)
 80024a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a6:	4a5b      	ldr	r2, [pc, #364]	; (8002614 <HAL_RCC_OscConfig+0x470>)
 80024a8:	f043 0301 	orr.w	r3, r3, #1
 80024ac:	6713      	str	r3, [r2, #112]	; 0x70
 80024ae:	e00b      	b.n	80024c8 <HAL_RCC_OscConfig+0x324>
 80024b0:	4b58      	ldr	r3, [pc, #352]	; (8002614 <HAL_RCC_OscConfig+0x470>)
 80024b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b4:	4a57      	ldr	r2, [pc, #348]	; (8002614 <HAL_RCC_OscConfig+0x470>)
 80024b6:	f023 0301 	bic.w	r3, r3, #1
 80024ba:	6713      	str	r3, [r2, #112]	; 0x70
 80024bc:	4b55      	ldr	r3, [pc, #340]	; (8002614 <HAL_RCC_OscConfig+0x470>)
 80024be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c0:	4a54      	ldr	r2, [pc, #336]	; (8002614 <HAL_RCC_OscConfig+0x470>)
 80024c2:	f023 0304 	bic.w	r3, r3, #4
 80024c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d015      	beq.n	80024fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d0:	f7fe ffde 	bl	8001490 <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024d6:	e00a      	b.n	80024ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024d8:	f7fe ffda 	bl	8001490 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e0cb      	b.n	8002686 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ee:	4b49      	ldr	r3, [pc, #292]	; (8002614 <HAL_RCC_OscConfig+0x470>)
 80024f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d0ee      	beq.n	80024d8 <HAL_RCC_OscConfig+0x334>
 80024fa:	e014      	b.n	8002526 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024fc:	f7fe ffc8 	bl	8001490 <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002502:	e00a      	b.n	800251a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002504:	f7fe ffc4 	bl	8001490 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002512:	4293      	cmp	r3, r2
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e0b5      	b.n	8002686 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800251a:	4b3e      	ldr	r3, [pc, #248]	; (8002614 <HAL_RCC_OscConfig+0x470>)
 800251c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1ee      	bne.n	8002504 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002526:	7dfb      	ldrb	r3, [r7, #23]
 8002528:	2b01      	cmp	r3, #1
 800252a:	d105      	bne.n	8002538 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800252c:	4b39      	ldr	r3, [pc, #228]	; (8002614 <HAL_RCC_OscConfig+0x470>)
 800252e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002530:	4a38      	ldr	r2, [pc, #224]	; (8002614 <HAL_RCC_OscConfig+0x470>)
 8002532:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002536:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	2b00      	cmp	r3, #0
 800253e:	f000 80a1 	beq.w	8002684 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002542:	4b34      	ldr	r3, [pc, #208]	; (8002614 <HAL_RCC_OscConfig+0x470>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f003 030c 	and.w	r3, r3, #12
 800254a:	2b08      	cmp	r3, #8
 800254c:	d05c      	beq.n	8002608 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	2b02      	cmp	r3, #2
 8002554:	d141      	bne.n	80025da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002556:	4b31      	ldr	r3, [pc, #196]	; (800261c <HAL_RCC_OscConfig+0x478>)
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255c:	f7fe ff98 	bl	8001490 <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002564:	f7fe ff94 	bl	8001490 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e087      	b.n	8002686 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002576:	4b27      	ldr	r3, [pc, #156]	; (8002614 <HAL_RCC_OscConfig+0x470>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1f0      	bne.n	8002564 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	69da      	ldr	r2, [r3, #28]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a1b      	ldr	r3, [r3, #32]
 800258a:	431a      	orrs	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002590:	019b      	lsls	r3, r3, #6
 8002592:	431a      	orrs	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002598:	085b      	lsrs	r3, r3, #1
 800259a:	3b01      	subs	r3, #1
 800259c:	041b      	lsls	r3, r3, #16
 800259e:	431a      	orrs	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a4:	061b      	lsls	r3, r3, #24
 80025a6:	491b      	ldr	r1, [pc, #108]	; (8002614 <HAL_RCC_OscConfig+0x470>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025ac:	4b1b      	ldr	r3, [pc, #108]	; (800261c <HAL_RCC_OscConfig+0x478>)
 80025ae:	2201      	movs	r2, #1
 80025b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b2:	f7fe ff6d 	bl	8001490 <HAL_GetTick>
 80025b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025b8:	e008      	b.n	80025cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025ba:	f7fe ff69 	bl	8001490 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d901      	bls.n	80025cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e05c      	b.n	8002686 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025cc:	4b11      	ldr	r3, [pc, #68]	; (8002614 <HAL_RCC_OscConfig+0x470>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d0f0      	beq.n	80025ba <HAL_RCC_OscConfig+0x416>
 80025d8:	e054      	b.n	8002684 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025da:	4b10      	ldr	r3, [pc, #64]	; (800261c <HAL_RCC_OscConfig+0x478>)
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e0:	f7fe ff56 	bl	8001490 <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025e8:	f7fe ff52 	bl	8001490 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e045      	b.n	8002686 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025fa:	4b06      	ldr	r3, [pc, #24]	; (8002614 <HAL_RCC_OscConfig+0x470>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1f0      	bne.n	80025e8 <HAL_RCC_OscConfig+0x444>
 8002606:	e03d      	b.n	8002684 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d107      	bne.n	8002620 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e038      	b.n	8002686 <HAL_RCC_OscConfig+0x4e2>
 8002614:	40023800 	.word	0x40023800
 8002618:	40007000 	.word	0x40007000
 800261c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002620:	4b1b      	ldr	r3, [pc, #108]	; (8002690 <HAL_RCC_OscConfig+0x4ec>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d028      	beq.n	8002680 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002638:	429a      	cmp	r2, r3
 800263a:	d121      	bne.n	8002680 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002646:	429a      	cmp	r2, r3
 8002648:	d11a      	bne.n	8002680 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002650:	4013      	ands	r3, r2
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002656:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002658:	4293      	cmp	r3, r2
 800265a:	d111      	bne.n	8002680 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002666:	085b      	lsrs	r3, r3, #1
 8002668:	3b01      	subs	r3, #1
 800266a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800266c:	429a      	cmp	r2, r3
 800266e:	d107      	bne.n	8002680 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800267c:	429a      	cmp	r2, r3
 800267e:	d001      	beq.n	8002684 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e000      	b.n	8002686 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3718      	adds	r7, #24
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	40023800 	.word	0x40023800

08002694 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d101      	bne.n	80026a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e0cc      	b.n	8002842 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026a8:	4b68      	ldr	r3, [pc, #416]	; (800284c <HAL_RCC_ClockConfig+0x1b8>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0307 	and.w	r3, r3, #7
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d90c      	bls.n	80026d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026b6:	4b65      	ldr	r3, [pc, #404]	; (800284c <HAL_RCC_ClockConfig+0x1b8>)
 80026b8:	683a      	ldr	r2, [r7, #0]
 80026ba:	b2d2      	uxtb	r2, r2
 80026bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026be:	4b63      	ldr	r3, [pc, #396]	; (800284c <HAL_RCC_ClockConfig+0x1b8>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0307 	and.w	r3, r3, #7
 80026c6:	683a      	ldr	r2, [r7, #0]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d001      	beq.n	80026d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e0b8      	b.n	8002842 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d020      	beq.n	800271e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0304 	and.w	r3, r3, #4
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d005      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026e8:	4b59      	ldr	r3, [pc, #356]	; (8002850 <HAL_RCC_ClockConfig+0x1bc>)
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	4a58      	ldr	r2, [pc, #352]	; (8002850 <HAL_RCC_ClockConfig+0x1bc>)
 80026ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0308 	and.w	r3, r3, #8
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d005      	beq.n	800270c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002700:	4b53      	ldr	r3, [pc, #332]	; (8002850 <HAL_RCC_ClockConfig+0x1bc>)
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	4a52      	ldr	r2, [pc, #328]	; (8002850 <HAL_RCC_ClockConfig+0x1bc>)
 8002706:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800270a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800270c:	4b50      	ldr	r3, [pc, #320]	; (8002850 <HAL_RCC_ClockConfig+0x1bc>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	494d      	ldr	r1, [pc, #308]	; (8002850 <HAL_RCC_ClockConfig+0x1bc>)
 800271a:	4313      	orrs	r3, r2
 800271c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	2b00      	cmp	r3, #0
 8002728:	d044      	beq.n	80027b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d107      	bne.n	8002742 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002732:	4b47      	ldr	r3, [pc, #284]	; (8002850 <HAL_RCC_ClockConfig+0x1bc>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d119      	bne.n	8002772 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e07f      	b.n	8002842 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2b02      	cmp	r3, #2
 8002748:	d003      	beq.n	8002752 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800274e:	2b03      	cmp	r3, #3
 8002750:	d107      	bne.n	8002762 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002752:	4b3f      	ldr	r3, [pc, #252]	; (8002850 <HAL_RCC_ClockConfig+0x1bc>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d109      	bne.n	8002772 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e06f      	b.n	8002842 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002762:	4b3b      	ldr	r3, [pc, #236]	; (8002850 <HAL_RCC_ClockConfig+0x1bc>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e067      	b.n	8002842 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002772:	4b37      	ldr	r3, [pc, #220]	; (8002850 <HAL_RCC_ClockConfig+0x1bc>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f023 0203 	bic.w	r2, r3, #3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	4934      	ldr	r1, [pc, #208]	; (8002850 <HAL_RCC_ClockConfig+0x1bc>)
 8002780:	4313      	orrs	r3, r2
 8002782:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002784:	f7fe fe84 	bl	8001490 <HAL_GetTick>
 8002788:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800278a:	e00a      	b.n	80027a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800278c:	f7fe fe80 	bl	8001490 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	f241 3288 	movw	r2, #5000	; 0x1388
 800279a:	4293      	cmp	r3, r2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e04f      	b.n	8002842 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027a2:	4b2b      	ldr	r3, [pc, #172]	; (8002850 <HAL_RCC_ClockConfig+0x1bc>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f003 020c 	and.w	r2, r3, #12
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d1eb      	bne.n	800278c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027b4:	4b25      	ldr	r3, [pc, #148]	; (800284c <HAL_RCC_ClockConfig+0x1b8>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0307 	and.w	r3, r3, #7
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d20c      	bcs.n	80027dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027c2:	4b22      	ldr	r3, [pc, #136]	; (800284c <HAL_RCC_ClockConfig+0x1b8>)
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	b2d2      	uxtb	r2, r2
 80027c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ca:	4b20      	ldr	r3, [pc, #128]	; (800284c <HAL_RCC_ClockConfig+0x1b8>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0307 	and.w	r3, r3, #7
 80027d2:	683a      	ldr	r2, [r7, #0]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d001      	beq.n	80027dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e032      	b.n	8002842 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d008      	beq.n	80027fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027e8:	4b19      	ldr	r3, [pc, #100]	; (8002850 <HAL_RCC_ClockConfig+0x1bc>)
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	4916      	ldr	r1, [pc, #88]	; (8002850 <HAL_RCC_ClockConfig+0x1bc>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0308 	and.w	r3, r3, #8
 8002802:	2b00      	cmp	r3, #0
 8002804:	d009      	beq.n	800281a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002806:	4b12      	ldr	r3, [pc, #72]	; (8002850 <HAL_RCC_ClockConfig+0x1bc>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	490e      	ldr	r1, [pc, #56]	; (8002850 <HAL_RCC_ClockConfig+0x1bc>)
 8002816:	4313      	orrs	r3, r2
 8002818:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800281a:	f000 f821 	bl	8002860 <HAL_RCC_GetSysClockFreq>
 800281e:	4602      	mov	r2, r0
 8002820:	4b0b      	ldr	r3, [pc, #44]	; (8002850 <HAL_RCC_ClockConfig+0x1bc>)
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	091b      	lsrs	r3, r3, #4
 8002826:	f003 030f 	and.w	r3, r3, #15
 800282a:	490a      	ldr	r1, [pc, #40]	; (8002854 <HAL_RCC_ClockConfig+0x1c0>)
 800282c:	5ccb      	ldrb	r3, [r1, r3]
 800282e:	fa22 f303 	lsr.w	r3, r2, r3
 8002832:	4a09      	ldr	r2, [pc, #36]	; (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 8002834:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002836:	4b09      	ldr	r3, [pc, #36]	; (800285c <HAL_RCC_ClockConfig+0x1c8>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4618      	mov	r0, r3
 800283c:	f7fe fde4 	bl	8001408 <HAL_InitTick>

  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3710      	adds	r7, #16
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	40023c00 	.word	0x40023c00
 8002850:	40023800 	.word	0x40023800
 8002854:	08003274 	.word	0x08003274
 8002858:	20009600 	.word	0x20009600
 800285c:	20009604 	.word	0x20009604

08002860 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002860:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002864:	b094      	sub	sp, #80	; 0x50
 8002866:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002868:	2300      	movs	r3, #0
 800286a:	647b      	str	r3, [r7, #68]	; 0x44
 800286c:	2300      	movs	r3, #0
 800286e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002870:	2300      	movs	r3, #0
 8002872:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002874:	2300      	movs	r3, #0
 8002876:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002878:	4b79      	ldr	r3, [pc, #484]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x200>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f003 030c 	and.w	r3, r3, #12
 8002880:	2b08      	cmp	r3, #8
 8002882:	d00d      	beq.n	80028a0 <HAL_RCC_GetSysClockFreq+0x40>
 8002884:	2b08      	cmp	r3, #8
 8002886:	f200 80e1 	bhi.w	8002a4c <HAL_RCC_GetSysClockFreq+0x1ec>
 800288a:	2b00      	cmp	r3, #0
 800288c:	d002      	beq.n	8002894 <HAL_RCC_GetSysClockFreq+0x34>
 800288e:	2b04      	cmp	r3, #4
 8002890:	d003      	beq.n	800289a <HAL_RCC_GetSysClockFreq+0x3a>
 8002892:	e0db      	b.n	8002a4c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002894:	4b73      	ldr	r3, [pc, #460]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x204>)
 8002896:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002898:	e0db      	b.n	8002a52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800289a:	4b73      	ldr	r3, [pc, #460]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x208>)
 800289c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800289e:	e0d8      	b.n	8002a52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028a0:	4b6f      	ldr	r3, [pc, #444]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x200>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028a8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028aa:	4b6d      	ldr	r3, [pc, #436]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x200>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d063      	beq.n	800297e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028b6:	4b6a      	ldr	r3, [pc, #424]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x200>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	099b      	lsrs	r3, r3, #6
 80028bc:	2200      	movs	r2, #0
 80028be:	63bb      	str	r3, [r7, #56]	; 0x38
 80028c0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80028c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028c8:	633b      	str	r3, [r7, #48]	; 0x30
 80028ca:	2300      	movs	r3, #0
 80028cc:	637b      	str	r3, [r7, #52]	; 0x34
 80028ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80028d2:	4622      	mov	r2, r4
 80028d4:	462b      	mov	r3, r5
 80028d6:	f04f 0000 	mov.w	r0, #0
 80028da:	f04f 0100 	mov.w	r1, #0
 80028de:	0159      	lsls	r1, r3, #5
 80028e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028e4:	0150      	lsls	r0, r2, #5
 80028e6:	4602      	mov	r2, r0
 80028e8:	460b      	mov	r3, r1
 80028ea:	4621      	mov	r1, r4
 80028ec:	1a51      	subs	r1, r2, r1
 80028ee:	6139      	str	r1, [r7, #16]
 80028f0:	4629      	mov	r1, r5
 80028f2:	eb63 0301 	sbc.w	r3, r3, r1
 80028f6:	617b      	str	r3, [r7, #20]
 80028f8:	f04f 0200 	mov.w	r2, #0
 80028fc:	f04f 0300 	mov.w	r3, #0
 8002900:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002904:	4659      	mov	r1, fp
 8002906:	018b      	lsls	r3, r1, #6
 8002908:	4651      	mov	r1, sl
 800290a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800290e:	4651      	mov	r1, sl
 8002910:	018a      	lsls	r2, r1, #6
 8002912:	4651      	mov	r1, sl
 8002914:	ebb2 0801 	subs.w	r8, r2, r1
 8002918:	4659      	mov	r1, fp
 800291a:	eb63 0901 	sbc.w	r9, r3, r1
 800291e:	f04f 0200 	mov.w	r2, #0
 8002922:	f04f 0300 	mov.w	r3, #0
 8002926:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800292a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800292e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002932:	4690      	mov	r8, r2
 8002934:	4699      	mov	r9, r3
 8002936:	4623      	mov	r3, r4
 8002938:	eb18 0303 	adds.w	r3, r8, r3
 800293c:	60bb      	str	r3, [r7, #8]
 800293e:	462b      	mov	r3, r5
 8002940:	eb49 0303 	adc.w	r3, r9, r3
 8002944:	60fb      	str	r3, [r7, #12]
 8002946:	f04f 0200 	mov.w	r2, #0
 800294a:	f04f 0300 	mov.w	r3, #0
 800294e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002952:	4629      	mov	r1, r5
 8002954:	024b      	lsls	r3, r1, #9
 8002956:	4621      	mov	r1, r4
 8002958:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800295c:	4621      	mov	r1, r4
 800295e:	024a      	lsls	r2, r1, #9
 8002960:	4610      	mov	r0, r2
 8002962:	4619      	mov	r1, r3
 8002964:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002966:	2200      	movs	r2, #0
 8002968:	62bb      	str	r3, [r7, #40]	; 0x28
 800296a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800296c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002970:	f7fd fc2a 	bl	80001c8 <__aeabi_uldivmod>
 8002974:	4602      	mov	r2, r0
 8002976:	460b      	mov	r3, r1
 8002978:	4613      	mov	r3, r2
 800297a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800297c:	e058      	b.n	8002a30 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800297e:	4b38      	ldr	r3, [pc, #224]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x200>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	099b      	lsrs	r3, r3, #6
 8002984:	2200      	movs	r2, #0
 8002986:	4618      	mov	r0, r3
 8002988:	4611      	mov	r1, r2
 800298a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800298e:	623b      	str	r3, [r7, #32]
 8002990:	2300      	movs	r3, #0
 8002992:	627b      	str	r3, [r7, #36]	; 0x24
 8002994:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002998:	4642      	mov	r2, r8
 800299a:	464b      	mov	r3, r9
 800299c:	f04f 0000 	mov.w	r0, #0
 80029a0:	f04f 0100 	mov.w	r1, #0
 80029a4:	0159      	lsls	r1, r3, #5
 80029a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029aa:	0150      	lsls	r0, r2, #5
 80029ac:	4602      	mov	r2, r0
 80029ae:	460b      	mov	r3, r1
 80029b0:	4641      	mov	r1, r8
 80029b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80029b6:	4649      	mov	r1, r9
 80029b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80029bc:	f04f 0200 	mov.w	r2, #0
 80029c0:	f04f 0300 	mov.w	r3, #0
 80029c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80029c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80029cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80029d0:	ebb2 040a 	subs.w	r4, r2, sl
 80029d4:	eb63 050b 	sbc.w	r5, r3, fp
 80029d8:	f04f 0200 	mov.w	r2, #0
 80029dc:	f04f 0300 	mov.w	r3, #0
 80029e0:	00eb      	lsls	r3, r5, #3
 80029e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029e6:	00e2      	lsls	r2, r4, #3
 80029e8:	4614      	mov	r4, r2
 80029ea:	461d      	mov	r5, r3
 80029ec:	4643      	mov	r3, r8
 80029ee:	18e3      	adds	r3, r4, r3
 80029f0:	603b      	str	r3, [r7, #0]
 80029f2:	464b      	mov	r3, r9
 80029f4:	eb45 0303 	adc.w	r3, r5, r3
 80029f8:	607b      	str	r3, [r7, #4]
 80029fa:	f04f 0200 	mov.w	r2, #0
 80029fe:	f04f 0300 	mov.w	r3, #0
 8002a02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a06:	4629      	mov	r1, r5
 8002a08:	028b      	lsls	r3, r1, #10
 8002a0a:	4621      	mov	r1, r4
 8002a0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a10:	4621      	mov	r1, r4
 8002a12:	028a      	lsls	r2, r1, #10
 8002a14:	4610      	mov	r0, r2
 8002a16:	4619      	mov	r1, r3
 8002a18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	61bb      	str	r3, [r7, #24]
 8002a1e:	61fa      	str	r2, [r7, #28]
 8002a20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a24:	f7fd fbd0 	bl	80001c8 <__aeabi_uldivmod>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a30:	4b0b      	ldr	r3, [pc, #44]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	0c1b      	lsrs	r3, r3, #16
 8002a36:	f003 0303 	and.w	r3, r3, #3
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002a40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a48:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a4a:	e002      	b.n	8002a52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a4c:	4b05      	ldr	r3, [pc, #20]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a4e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3750      	adds	r7, #80	; 0x50
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a5e:	bf00      	nop
 8002a60:	40023800 	.word	0x40023800
 8002a64:	00f42400 	.word	0x00f42400
 8002a68:	007a1200 	.word	0x007a1200

08002a6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e07b      	b.n	8002b76 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d108      	bne.n	8002a98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a8e:	d009      	beq.n	8002aa4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	61da      	str	r2, [r3, #28]
 8002a96:	e005      	b.n	8002aa4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d106      	bne.n	8002ac4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f7fe fb1e 	bl	8001100 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ada:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002aec:	431a      	orrs	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002af6:	431a      	orrs	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	431a      	orrs	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b14:	431a      	orrs	r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b28:	ea42 0103 	orr.w	r1, r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b30:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	0c1b      	lsrs	r3, r3, #16
 8002b42:	f003 0104 	and.w	r1, r3, #4
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4a:	f003 0210 	and.w	r2, r3, #16
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	69da      	ldr	r2, [r3, #28]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b64:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
	...

08002b80 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d101      	bne.n	8002ba0 <HAL_SPI_Transmit_DMA+0x20>
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	e09b      	b.n	8002cd8 <HAL_SPI_Transmit_DMA+0x158>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d002      	beq.n	8002bba <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002bb8:	e089      	b.n	8002cce <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d002      	beq.n	8002bc6 <HAL_SPI_Transmit_DMA+0x46>
 8002bc0:	88fb      	ldrh	r3, [r7, #6]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d102      	bne.n	8002bcc <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002bca:	e080      	b.n	8002cce <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2203      	movs	r2, #3
 8002bd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	68ba      	ldr	r2, [r7, #8]
 8002bde:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	88fa      	ldrh	r2, [r7, #6]
 8002be4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	88fa      	ldrh	r2, [r7, #6]
 8002bea:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c12:	d10f      	bne.n	8002c34 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c22:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c32:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c38:	4a29      	ldr	r2, [pc, #164]	; (8002ce0 <HAL_SPI_Transmit_DMA+0x160>)
 8002c3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c40:	4a28      	ldr	r2, [pc, #160]	; (8002ce4 <HAL_SPI_Transmit_DMA+0x164>)
 8002c42:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c48:	4a27      	ldr	r2, [pc, #156]	; (8002ce8 <HAL_SPI_Transmit_DMA+0x168>)
 8002c4a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c50:	2200      	movs	r2, #0
 8002c52:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	330c      	adds	r3, #12
 8002c64:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c6a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002c6c:	f7fe fe00 	bl	8001870 <HAL_DMA_Start_IT>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00c      	beq.n	8002c90 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c7a:	f043 0210 	orr.w	r2, r3, #16
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8002c8e:	e01e      	b.n	8002cce <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c9a:	2b40      	cmp	r3, #64	; 0x40
 8002c9c:	d007      	beq.n	8002cae <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cac:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	685a      	ldr	r2, [r3, #4]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f042 0220 	orr.w	r2, r2, #32
 8002cbc:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	685a      	ldr	r2, [r3, #4]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f042 0202 	orr.w	r2, r2, #2
 8002ccc:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002cd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3718      	adds	r7, #24
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	08002fed 	.word	0x08002fed
 8002ce4:	08002f45 	.word	0x08002f45
 8002ce8:	08003009 	.word	0x08003009

08002cec <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b088      	sub	sp, #32
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	099b      	lsrs	r3, r3, #6
 8002d08:	f003 0301 	and.w	r3, r3, #1
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d10f      	bne.n	8002d30 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00a      	beq.n	8002d30 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	099b      	lsrs	r3, r3, #6
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d004      	beq.n	8002d30 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	4798      	blx	r3
    return;
 8002d2e:	e0d7      	b.n	8002ee0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	085b      	lsrs	r3, r3, #1
 8002d34:	f003 0301 	and.w	r3, r3, #1
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00a      	beq.n	8002d52 <HAL_SPI_IRQHandler+0x66>
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	09db      	lsrs	r3, r3, #7
 8002d40:	f003 0301 	and.w	r3, r3, #1
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d004      	beq.n	8002d52 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	4798      	blx	r3
    return;
 8002d50:	e0c6      	b.n	8002ee0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	095b      	lsrs	r3, r3, #5
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10c      	bne.n	8002d78 <HAL_SPI_IRQHandler+0x8c>
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	099b      	lsrs	r3, r3, #6
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d106      	bne.n	8002d78 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	0a1b      	lsrs	r3, r3, #8
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f000 80b4 	beq.w	8002ee0 <HAL_SPI_IRQHandler+0x1f4>
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	095b      	lsrs	r3, r3, #5
 8002d7c:	f003 0301 	and.w	r3, r3, #1
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f000 80ad 	beq.w	8002ee0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	099b      	lsrs	r3, r3, #6
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d023      	beq.n	8002dda <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b03      	cmp	r3, #3
 8002d9c:	d011      	beq.n	8002dc2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da2:	f043 0204 	orr.w	r2, r3, #4
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002daa:	2300      	movs	r3, #0
 8002dac:	617b      	str	r3, [r7, #20]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	617b      	str	r3, [r7, #20]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	617b      	str	r3, [r7, #20]
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	e00b      	b.n	8002dda <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	613b      	str	r3, [r7, #16]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	613b      	str	r3, [r7, #16]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	613b      	str	r3, [r7, #16]
 8002dd6:	693b      	ldr	r3, [r7, #16]
        return;
 8002dd8:	e082      	b.n	8002ee0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	095b      	lsrs	r3, r3, #5
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d014      	beq.n	8002e10 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dea:	f043 0201 	orr.w	r2, r3, #1
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002df2:	2300      	movs	r3, #0
 8002df4:	60fb      	str	r3, [r7, #12]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	60fb      	str	r3, [r7, #12]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e0c:	601a      	str	r2, [r3, #0]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	0a1b      	lsrs	r3, r3, #8
 8002e14:	f003 0301 	and.w	r3, r3, #1
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d00c      	beq.n	8002e36 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e20:	f043 0208 	orr.w	r2, r3, #8
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002e28:	2300      	movs	r3, #0
 8002e2a:	60bb      	str	r3, [r7, #8]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	60bb      	str	r3, [r7, #8]
 8002e34:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d04f      	beq.n	8002ede <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002e4c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2201      	movs	r2, #1
 8002e52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d104      	bne.n	8002e6a <HAL_SPI_IRQHandler+0x17e>
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d034      	beq.n	8002ed4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f022 0203 	bic.w	r2, r2, #3
 8002e78:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d011      	beq.n	8002ea6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e86:	4a18      	ldr	r2, [pc, #96]	; (8002ee8 <HAL_SPI_IRQHandler+0x1fc>)
 8002e88:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7fe fd46 	bl	8001920 <HAL_DMA_Abort_IT>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d005      	beq.n	8002ea6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e9e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d016      	beq.n	8002edc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eb2:	4a0d      	ldr	r2, [pc, #52]	; (8002ee8 <HAL_SPI_IRQHandler+0x1fc>)
 8002eb4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7fe fd30 	bl	8001920 <HAL_DMA_Abort_IT>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00a      	beq.n	8002edc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002ed2:	e003      	b.n	8002edc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f000 f81d 	bl	8002f14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002eda:	e000      	b.n	8002ede <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8002edc:	bf00      	nop
    return;
 8002ede:	bf00      	nop
  }
}
 8002ee0:	3720      	adds	r7, #32
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	08003049 	.word	0x08003049

08002eec <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8002ef4:	bf00      	nop
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f36:	b2db      	uxtb	r3, r3
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f50:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f52:	f7fe fa9d 	bl	8001490 <HAL_GetTick>
 8002f56:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f66:	d03b      	beq.n	8002fe0 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	685a      	ldr	r2, [r3, #4]
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f022 0220 	bic.w	r2, r2, #32
 8002f76:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	685a      	ldr	r2, [r3, #4]
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f022 0202 	bic.w	r2, r2, #2
 8002f86:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002f88:	693a      	ldr	r2, [r7, #16]
 8002f8a:	2164      	movs	r1, #100	; 0x64
 8002f8c:	6978      	ldr	r0, [r7, #20]
 8002f8e:	f000 f8f7 	bl	8003180 <SPI_EndRxTxTransaction>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d005      	beq.n	8002fa4 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f9c:	f043 0220 	orr.w	r2, r3, #32
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d10a      	bne.n	8002fc2 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002fac:	2300      	movs	r3, #0
 8002fae:	60fb      	str	r3, [r7, #12]
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	60fb      	str	r3, [r7, #12]
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	60fb      	str	r3, [r7, #12]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d003      	beq.n	8002fe0 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002fd8:	6978      	ldr	r0, [r7, #20]
 8002fda:	f7ff ff9b 	bl	8002f14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002fde:	e002      	b.n	8002fe6 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8002fe0:	6978      	ldr	r0, [r7, #20]
 8002fe2:	f7ff ff83 	bl	8002eec <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002fe6:	3718      	adds	r7, #24
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff8:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	f7ff ff80 	bl	8002f00 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003000:	bf00      	nop
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003014:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f022 0203 	bic.w	r2, r2, #3
 8003024:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800302a:	f043 0210 	orr.w	r2, r3, #16
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800303a:	68f8      	ldr	r0, [r7, #12]
 800303c:	f7ff ff6a 	bl	8002f14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003040:	bf00      	nop
 8003042:	3710      	adds	r7, #16
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003054:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003062:	68f8      	ldr	r0, [r7, #12]
 8003064:	f7ff ff56 	bl	8002f14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003068:	bf00      	nop
 800306a:	3710      	adds	r7, #16
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b088      	sub	sp, #32
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	603b      	str	r3, [r7, #0]
 800307c:	4613      	mov	r3, r2
 800307e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003080:	f7fe fa06 	bl	8001490 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003088:	1a9b      	subs	r3, r3, r2
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	4413      	add	r3, r2
 800308e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003090:	f7fe f9fe 	bl	8001490 <HAL_GetTick>
 8003094:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003096:	4b39      	ldr	r3, [pc, #228]	; (800317c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	015b      	lsls	r3, r3, #5
 800309c:	0d1b      	lsrs	r3, r3, #20
 800309e:	69fa      	ldr	r2, [r7, #28]
 80030a0:	fb02 f303 	mul.w	r3, r2, r3
 80030a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030a6:	e054      	b.n	8003152 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ae:	d050      	beq.n	8003152 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80030b0:	f7fe f9ee 	bl	8001490 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	69fa      	ldr	r2, [r7, #28]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d902      	bls.n	80030c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d13d      	bne.n	8003142 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	685a      	ldr	r2, [r3, #4]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80030d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030de:	d111      	bne.n	8003104 <SPI_WaitFlagStateUntilTimeout+0x94>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030e8:	d004      	beq.n	80030f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030f2:	d107      	bne.n	8003104 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003102:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003108:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800310c:	d10f      	bne.n	800312e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800311c:	601a      	str	r2, [r3, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800312c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e017      	b.n	8003172 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d101      	bne.n	800314c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003148:	2300      	movs	r3, #0
 800314a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	3b01      	subs	r3, #1
 8003150:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	689a      	ldr	r2, [r3, #8]
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	4013      	ands	r3, r2
 800315c:	68ba      	ldr	r2, [r7, #8]
 800315e:	429a      	cmp	r2, r3
 8003160:	bf0c      	ite	eq
 8003162:	2301      	moveq	r3, #1
 8003164:	2300      	movne	r3, #0
 8003166:	b2db      	uxtb	r3, r3
 8003168:	461a      	mov	r2, r3
 800316a:	79fb      	ldrb	r3, [r7, #7]
 800316c:	429a      	cmp	r2, r3
 800316e:	d19b      	bne.n	80030a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3720      	adds	r7, #32
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	20009600 	.word	0x20009600

08003180 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b088      	sub	sp, #32
 8003184:	af02      	add	r7, sp, #8
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800318c:	4b1b      	ldr	r3, [pc, #108]	; (80031fc <SPI_EndRxTxTransaction+0x7c>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a1b      	ldr	r2, [pc, #108]	; (8003200 <SPI_EndRxTxTransaction+0x80>)
 8003192:	fba2 2303 	umull	r2, r3, r2, r3
 8003196:	0d5b      	lsrs	r3, r3, #21
 8003198:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800319c:	fb02 f303 	mul.w	r3, r2, r3
 80031a0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031aa:	d112      	bne.n	80031d2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	9300      	str	r3, [sp, #0]
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	2200      	movs	r2, #0
 80031b4:	2180      	movs	r1, #128	; 0x80
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f7ff ff5a 	bl	8003070 <SPI_WaitFlagStateUntilTimeout>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d016      	beq.n	80031f0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c6:	f043 0220 	orr.w	r2, r3, #32
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e00f      	b.n	80031f2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00a      	beq.n	80031ee <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	3b01      	subs	r3, #1
 80031dc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031e8:	2b80      	cmp	r3, #128	; 0x80
 80031ea:	d0f2      	beq.n	80031d2 <SPI_EndRxTxTransaction+0x52>
 80031ec:	e000      	b.n	80031f0 <SPI_EndRxTxTransaction+0x70>
        break;
 80031ee:	bf00      	nop
  }

  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3718      	adds	r7, #24
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	20009600 	.word	0x20009600
 8003200:	165e9f81 	.word	0x165e9f81

08003204 <__libc_init_array>:
 8003204:	b570      	push	{r4, r5, r6, lr}
 8003206:	4d0d      	ldr	r5, [pc, #52]	; (800323c <__libc_init_array+0x38>)
 8003208:	4c0d      	ldr	r4, [pc, #52]	; (8003240 <__libc_init_array+0x3c>)
 800320a:	1b64      	subs	r4, r4, r5
 800320c:	10a4      	asrs	r4, r4, #2
 800320e:	2600      	movs	r6, #0
 8003210:	42a6      	cmp	r6, r4
 8003212:	d109      	bne.n	8003228 <__libc_init_array+0x24>
 8003214:	4d0b      	ldr	r5, [pc, #44]	; (8003244 <__libc_init_array+0x40>)
 8003216:	4c0c      	ldr	r4, [pc, #48]	; (8003248 <__libc_init_array+0x44>)
 8003218:	f000 f820 	bl	800325c <_init>
 800321c:	1b64      	subs	r4, r4, r5
 800321e:	10a4      	asrs	r4, r4, #2
 8003220:	2600      	movs	r6, #0
 8003222:	42a6      	cmp	r6, r4
 8003224:	d105      	bne.n	8003232 <__libc_init_array+0x2e>
 8003226:	bd70      	pop	{r4, r5, r6, pc}
 8003228:	f855 3b04 	ldr.w	r3, [r5], #4
 800322c:	4798      	blx	r3
 800322e:	3601      	adds	r6, #1
 8003230:	e7ee      	b.n	8003210 <__libc_init_array+0xc>
 8003232:	f855 3b04 	ldr.w	r3, [r5], #4
 8003236:	4798      	blx	r3
 8003238:	3601      	adds	r6, #1
 800323a:	e7f2      	b.n	8003222 <__libc_init_array+0x1e>
 800323c:	08003294 	.word	0x08003294
 8003240:	08003294 	.word	0x08003294
 8003244:	08003294 	.word	0x08003294
 8003248:	08003298 	.word	0x08003298

0800324c <memset>:
 800324c:	4402      	add	r2, r0
 800324e:	4603      	mov	r3, r0
 8003250:	4293      	cmp	r3, r2
 8003252:	d100      	bne.n	8003256 <memset+0xa>
 8003254:	4770      	bx	lr
 8003256:	f803 1b01 	strb.w	r1, [r3], #1
 800325a:	e7f9      	b.n	8003250 <memset+0x4>

0800325c <_init>:
 800325c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800325e:	bf00      	nop
 8003260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003262:	bc08      	pop	{r3}
 8003264:	469e      	mov	lr, r3
 8003266:	4770      	bx	lr

08003268 <_fini>:
 8003268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800326a:	bf00      	nop
 800326c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800326e:	bc08      	pop	{r3}
 8003270:	469e      	mov	lr, r3
 8003272:	4770      	bx	lr
